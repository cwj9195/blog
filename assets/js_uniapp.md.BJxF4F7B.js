import{_ as s,c as i,o as a,a4 as l}from"./chunks/framework.JknIMk6Q.js";const g=JSON.parse('{"title":"vue","description":"","frontmatter":{},"headers":[],"relativePath":"js/uniapp.md","filePath":"js/uniapp.md"}'),n={name:"js/uniapp.md"},e=l(`<h1 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h1><ul><li><p>使用 vue-cli 构建</p><ol><li><code>sudo npm i -g @vue/cli</code> || <code>sudo npm i -g @vue/cli-init</code><ul><li>全局安装得加 sudo 不然全局写入时是没权限的 会执行失败 (安装脚手架,脚手架是项目前期已经配置好的模板 <code>npm install -g vue-cli （旧版-已废弃）</code>)</li></ul></li><li><code>vue create hello-world</code> || <code>vue init webpack projectname</code></li></ol></li><li><p><code>npm i sass-loader@8.0.2 sass@1.26.2</code> || <code>npm i sass-loader@7.3.1 node-sass@4.14.1 -D</code> || <code>npm i -D stylus stylus-loader style-loader</code></p></li></ul><h2 id="windicss-tailwindcss" tabindex="-1">windicss &amp;&amp; tailWindcss <a class="header-anchor" href="#windicss-tailwindcss" aria-label="Permalink to &quot;windicss &amp;&amp; tailWindcss&quot;">​</a></h2><ul><li><p><code>npm i -D vue-cli-plugin-windicss</code></p><blockquote><p>vscode 提示插件 Windi CSS Intellisense</p></blockquote></li><li><p>main.js引入<code>import &#39;windi.css&#39;</code></p></li><li><p>vue.config.js 配置</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//vue.config.js</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pluginOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    windicss: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 具体配置请查看 https://github.com/windicss/vite-plugin-windicss/blob/main/packages/plugin-utils/src/options.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>windi.config.js</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// windi.config.js</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 如果需要可以在根目录加这个配置文件 &lt;https://windicss.org/guide/migration.html&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> colors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;windicss/colors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  purge: [],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  darkMode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  theme: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extend: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      scale: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;200&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      colors: { blue: Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colors.blue, { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#1890ff&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }), },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      boxShadow: { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;main&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0 2px 12px 0 rgb(0 0 0 / 10%)&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><hr><h1 id="uniapp" tabindex="-1">uniapp <a class="header-anchor" href="#uniapp" aria-label="Permalink to &quot;uniapp&quot;">​</a></h1><h2 id="通过-vue-cli-命令行" tabindex="-1">通过 vue-cli 命令行 <a class="header-anchor" href="#通过-vue-cli-命令行" aria-label="Permalink to &quot;通过 vue-cli 命令行&quot;">​</a></h2><ul><li><a href="https://uniapp.dcloud.io/quickstart-cli" target="_blank" rel="noreferrer">uni-app cli 脚手架构建</a></li></ul><ol><li><p><code>sudo npm install @vue/cli -g</code></p></li><li><p>使用 vue-cli 创建 uni 项目</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建议使用 alpha 版-解决了 slot 插槽作用域的问题</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//manifest.json</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mp-weixin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {      </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scopedSlotsCompiler&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;augmented&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div><ul><li><code>vue create -p dcloudio/uni-preset-vue#alpha my-alpha-project</code><ul><li>使用 alpha 版（对应 HBuilderX 最新 alpha 版）</li></ul></li><li><code>vue create -p dcloudio/uni-preset-vue projectName</code><ul><li>使用正式版（对应 HBuilderX 最新正式版）</li><li>slot 插槽作用域问题 可更新 uni 依赖 <code>npx @dcloudio/uvm alpha</code></li></ul></li></ul></li><li><p><code>npm i sass-loader@7.3.1 node-sass@4.14.1 -D</code> || <code>npm i sass-loader@8.0.2 sass@1.26.2</code></p><ul><li>sass-loader：webpack 的处理包 &amp;&amp; node-sass：sass 下的包</li><li>安装时指向的 github 地址 官方可能会删除某一个版本造成下载 404 或者 网络问题 <a href="https://blog.csdn.net/qq_38505969/article/details/109788391" target="_blank" rel="noreferrer">相关文章</a></li></ul></li><li><p><code>npm i uni-read-pages@1.0.5 uni-simple-router@2.0.0 uview-ui -S</code></p></li><li><p><code>npm i windicss-webpack-plugin @dcasia/mini-program-tailwind-webpack-plugin -D</code></p><ul><li>让你的小程序用上原汁原味的 Tailwind/Windi CSS<a href="https://github.com/dcasia/mini-program-tailwind" target="_blank" rel="noreferrer">引入方式点我</a></li></ul></li></ol><h2 id="tips" tabindex="-1">Tips <a class="header-anchor" href="#tips" aria-label="Permalink to &quot;Tips&quot;">​</a></h2><ul><li>之前用的版本2.0.2-alpha-3070120230210001 <ul><li><code>npx @dcloudio/uvm 2.0.2-alpha-3070120230210001</code> 恢复到这个版本</li><li>uni-app 有新版本发布，请执行 <code>npx @dcloudio/uvm alpha</code> 更新，更新日志详见：<a href="https://update.dcloud.net.cn/hbuilderx/changelog/3.7.12.20230331-alpha.html" target="_blank" rel="noreferrer">https://update.dcloud.net.cn/hbuilderx/changelog/3.7.12.20230331-alpha.html</a></li></ul></li></ul><ol><li><p>uniapp 微信 小程序里顶层全局 <code>window</code> <code>globalThis</code> <code>global</code></p></li><li><p>注意 Android 和 iOS 平台不支持通过条件编译来区分，如果需要区分 Android、iOS 平台，请通过调用 uni.getSystemInfo 来获取平台信息。支持 ifios、ifAndroid 代码块，可方便编写判断。 有些跨端工具可以提供 js 的条件编译或多态，但这对于实际开发远远不够。uni-app 不止是处理 js，任何代码都可以多端条件编译，才能真正解决实际项目的跨端问题。另外所谓多态在实际开发中会造成大量冗余代码，很不利于复用和维护。举例，微信小程序主题色是绿色，而百度支付宝小程序是蓝色，你的应用想分平台适配颜色，只有条件编译是代码量最低、最容易维护的。 有些公司的产品运营总是给不同平台提不同需求，但这不是拒绝 uni-app 的理由。关键在于项目里，复用的代码多还是个性的代码多，正常都是复用的代码多，所以仍然应该多端。而个性的代码放到不同平台的目录下，差异化维护。</p></li><li><p>引静态资源尽可能用绝对路径</p><ul><li>比如：&#39;/static/js/config.js&#39; <blockquote><p>支付宝小程序组件内 image 标签不可使用相对路径</p></blockquote></li></ul></li><li><p>App.vue 中的样式为全局样式，包括@import 语句可以导入外联样式，一样作用于每一个页面。</p><ul><li><strong><em><code>nvue</code></em></strong> 页面暂不支持全局样式</li></ul></li><li><p>static 目录下的 js 文件不会被编译，如果里面有 es6 的代码，不经过转换直接运行，在手机上会报错。建议在 static 目录下不要放一些 css、less/scss 等的资源文件，可以将其放在专门建的公共样式文件目录中。</p><ul><li><a href="https://www.cnblogs.com/lenbor/p/12696329.html" target="_blank" rel="noreferrer">Uniapp 项目的目录结构和资源路径说明</a></li></ul></li><li><p>scroll-view 不适合放长列表，有性能问题。长列表滚动和下拉刷新，应该使用原生导航栏搭配页面级的滚动和下拉刷新实现</p></li><li><p><code>App.mpType = &#39;app&#39;</code></p><ul><li>可在App.vue里直接写上 <code>mpType : &#39;app&#39;</code></li><li>App.vue组件被src/main.js引入并被设置了一个mpType的属性值，其值为app。这个值是为了与后面要讲的小程序页面组件所区分开来，因为小程序页面组件和这个App.vue组件的写法和引入方式是一致的，为了区分两者，需要设置mpType值。<a href="https://ask.dcloud.net.cn/question/82090" target="_blank" rel="noreferrer">点我跳转</a></li></ul></li></ol><hr><h1 id="云开发" tabindex="-1">云开发 <a class="header-anchor" href="#云开发" aria-label="Permalink to &quot;云开发&quot;">​</a></h1><h2 id="serverless" tabindex="-1">serverless <a class="header-anchor" href="#serverless" aria-label="Permalink to &quot;serverless&quot;">​</a></h2><ul><li>无服务架构的概念</li><li>Serverless 由开发者实现的服务端逻辑运行在无状态的计算容器中，它由事件触发， 完全被第三方管理，其业务层面的状态则被开发者使用的数据库和存储资源所记录。Serverless 涵盖了很多技术，分为两类：FaaS 和 BaaS。</li></ul><ol><li>baas（Backend as a Service ,后端即服务） <ul><li>服务商为客户(开发者)提供整合云后端的边界服务。既有移动端的 baas，也有 web 端的 baas，如提供文件存储、数据存储、推送服务、身份验证服务等功能，以帮助开发者快速开发应用。</li></ul></li><li>FaaS (Function as a Service,函数即服务) <ul><li>服务商提供一个平台，允许客户开发、运行和管理应用程序功能，而无需构建和维护通常与开发和启动应用程序相关的基础架构的复杂性。 按照此模型构建应用程序是实现“无服务器”体系结构的一种方式，通常在构建微服务应用程序时使用。</li></ul></li></ol><h2 id="小程序云开发能力" tabindex="-1">小程序云开发能力 <a class="header-anchor" href="#小程序云开发能力" aria-label="Permalink to &quot;小程序云开发能力&quot;">​</a></h2><ul><li><p>小程序云开发是属于腾讯云这块的，像小程序访问云开发的能力只是将腾讯云的云开发 cloudBase SDK 内置集成到了 wx.cloud 下</p></li><li><p><a href="https://cloud.tencent.com/document/product/876" target="_blank" rel="noreferrer">云开发 cloudBase</a></p></li><li><p>以下是云开发的各 <code>cloudBase SDK 【npm i -S &lt; @cloudbase/js-sdk | @cloudbase/node-sdk @cloudbase/manager-node | wx-server-sdk&gt;】</code></p></li></ul><ol><li>【客户端】 <ul><li>这里客户端提供的 SDK 相当于 serverless 里 BaaS 的概念 后端即服务 SDK 里封装如文件存储、数据存储、推送服务、身份验证服务等功能</li></ul><ol><li><a href="https://cloud.tencent.com/document/product/876/19385" target="_blank" rel="noreferrer">wx.cloud.init({}) 【小程序端】</a></li></ol><ul><li>微信小程序的 SDK，已经直接内置到微信小程序运行框架内，无需额外引用，节省空间。通过微信小程序 SDK，您可以在微信小程序中直接访问 CloudBase 的服务</li></ul><ol start="2"><li><a href="https://cloud.tencent.com/document/product/876/46332" target="_blank" rel="noreferrer">@cloudbase/js-sdk 【web 端】</a></li></ol><ul><li>@cloudbase/js-sdk (web SDK)能让您可以在 Web 端（例如 PC Web 页面、微信公众平台 H5 等）使用 JavaScript 访问 Cloudbase 服务和资源。</li></ul><ol start="3"><li><code>Flutter SDK</code></li><li><code>.NET SDK</code></li></ol></li><li>【服务端】 <ol><li><a href="https://cloud.tencent.com/document/product/876/47058" target="_blank" rel="noreferrer">@cloudbase/node-sdk 【服务端】</a></li></ol><ul><li>Cloudbase Server Node.js SDK 让您可以在服务端（例如腾讯云云函数或云服务器等）使用 Node.js 服务访问 TCB 的服务，如云函数调用，文件上传下载，数据库集合文档操作等，方便快速搭建应用。</li></ul></li><li>【管理端】 <ol><li><a href="https://cloud.tencent.com/document/product/876/47059" target="_blank" rel="noreferrer">@cloudbase/manager-node 【管理端】</a></li></ol><ul><li>云开发 manager-node sdk 支持开发者通过接口形式对云开发提供的云函数、数据库、文件存储等资源进行创建、管理、配置等操作</li></ul><ol start="2"><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions/wx-server-sdk.html" target="_blank" rel="noreferrer">wx-server-sdk 【云函数端】</a></li></ol><ul><li>在云函数中使用 wx-server-sdk <code>云函数属于管理端</code>，在云函数中运行的代码拥有不受限的数据库读写权限和云文件读写权限。需特别注意，云函数运行环境即是管理端，与云函数中的传入的 openId 对应的微信用户是否是小程序的管理员 / 开发者无关。</li></ul></li></ol><ul><li>weixin-js-sdk 用在微信公众号上 给 web-H5 赋予了操作 wx 的能力 wx.</li></ul><hr><h2 id="登录" tabindex="-1">登录 <a class="header-anchor" href="#登录" aria-label="Permalink to &quot;登录&quot;">​</a></h2><pre><code>1. wx.login()拿code到服务器看注册过没
2. 没有自已弹一个确认授权的框出来让点击触发wx.getUserProfile()来获取授权的信息再注册
</code></pre><ol><li><p>tips:</p><ol><li><p>在云函数中可不受限的访问第三方服务 got(<a href="http://wxchat.com" target="_blank" rel="noreferrer">http://wxchat.com</a>)</p></li><li><p>在云函数中也可访问第三方数据库</p></li><li><p>触发器</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在云函数根目录下创建config.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;triggers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;云函数名字&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;timers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//目前只有一个timers定时器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;* * * * * * *&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>微信数据库一次仅能查出来 100 条数据，所以需要做个拼接。</p></li><li><p>cloud.DYNAMIC_CURRENT_ENV : API 调用都保持和云函数当前所在环境一致(只能云函数用 小程序端用不了)</p></li><li><p>在本地调试中使用 DYNAMIC_CURRENT_ENV 相当于使用默认环境（第一个创建的环境）</p></li><li><p>cloud.DYNAMIC_CURRENT_ENV 为 Symbol 不是字符串 cloud.init({ env: cloud.DYNAMIC_CURRENT_ENV })</p></li></ol></li></ol><h2 id="数据库概念" tabindex="-1">数据库概念 <a class="header-anchor" href="#数据库概念" aria-label="Permalink to &quot;数据库概念&quot;">​</a></h2><ul><li>数据既可以内嵌（反范式化），也可以采用引用（范式化），两种策略各有优缺点，关键是要选择适合自己应用场景的方案。</li></ul><ol><li>关系型数据库（范式化） <ol><li>多集合(表) 通过引用来关联数据</li><li>数据更新更频繁那么范式化的设计是一个比较好的选择，</li><li>对于复杂的应用比如博客系统、商城系统，只用一个集合（完全反范式化设计）会导致集合过大，冗余数据更多，数据写入性能差等问题，这时候就需要进行一定的范式化设计，也就是用更多的集合，而不是更大的集合。</li></ol></li><li>非关系数据库 (反范式化) <ol><li>数据既内嵌 用户与购物车两个集合其实可以设计在一个集合 user 里 购物车内嵌在 user 集合字段下</li><li>完全反范式化的设计（将文档所需要的所有数据都嵌入到一个文档里面）可以大大减少文档查询的次数。</li><li>如果数据查询更频繁，而不需要怎么更新，那就没有必要把数据分散到不同的集合而牺牲查询的效率 反范式化 直接内嵌</li></ol></li></ol><table><thead><tr><th>mysql</th><th>mongodb</th></tr></thead><tbody><tr><td>关系型数据库</td><td>非关系型数据库</td></tr><tr><td>表</td><td>集合</td></tr><tr><td>行</td><td>记录</td></tr><tr><td>列</td><td>字段</td></tr></tbody></table><h2 id="数据库操作" tabindex="-1">数据库操作 <a class="header-anchor" href="#数据库操作" aria-label="Permalink to &quot;数据库操作&quot;">​</a></h2><ul><li>Collection</li></ul><ol><li>add <ul><li>【增】添加</li></ul><ol><li>cloud.database().collection(&#39;order&#39;).add({data:{...}})</li></ol></li><li>remove <ul><li>【删】删除</li></ul><ol><li>cloud.database().collection(&#39;order&#39;).where({name:&#39;小明&#39;}).remove()</li><li>cloud.database().collection(&#39;order&#39;).doc(&#39;_id&#39;).remove() <ul><li>doc()只能接收一个_id 参数 且返回的是 Document 对象</li></ul></li></ol></li><li>update <ul><li>【改】更新</li></ul><ol><li>cloud.database().collection(&#39;order&#39;).where({name:&#39;小明&#39;}).update({data:{...}})</li></ol></li><li>get <ul><li>【查】查询</li></ul><ol><li>cloud.database().collection(&#39;order&#39;).get()</li></ol></li><li>count <ul><li>统计匹配查询条件的记录的条数</li></ul></li></ol><h2 id="构建查询条件" tabindex="-1">构建查询条件 <a class="header-anchor" href="#构建查询条件" aria-label="Permalink to &quot;构建查询条件&quot;">​</a></h2><ul><li>返回集合引用 Collection</li></ul><ol><li>where(Object) <ul><li>指定查询条件，返回带新查询条件的新的集合引用</li></ul><ol><li>cloud.database().collection(&#39;order&#39;).where({}).get()</li></ol></li><li>field(Object) <ul><li>指定返回结果中记录需返回的字段</li><li>对象为 key:value key 为要指定哪个字段 value 为返回还是不返回 true|false（或 1|-1）</li></ul><ol><li>cloud.database().collection(&#39;todos&#39;).field({ order: true, name: true, phone: true}).get()</li></ol></li><li>limit(Number) <ul><li>指定查询结果集数量上限</li></ul><ol><li>cloud.database().collection(&#39;order&#39;).limit(10).get()</li></ol></li><li>orderBy(&#39;字段&#39;,&#39;asc | desc （排序方式）&#39;) <ul><li>指定查询排序条件</li></ul><ol><li>desc 从大到小</li><li>cloud.database().collection(&#39;order&#39;).orderBy(&#39;style&#39;, &#39;desc&#39;) .orderBy(&#39;style.css&#39;, &#39;asc&#39;) .get()</li></ol></li><li>skip(Number) <ul><li>指定查询返回结果时从指定序列后的结果开始返回，常用于分页</li></ul><ol><li>cloud.database().collection(&#39;order&#39;).skip(10).get()</li></ol></li></ol><h2 id="聚合-aggregate" tabindex="-1">聚合 aggregate <a class="header-anchor" href="#聚合-aggregate" aria-label="Permalink to &quot;聚合 aggregate&quot;">​</a></h2><blockquote><p>聚合操作只是数据库的一种高阶查询</p></blockquote><p>云开发聚合是一种数据批处理的操作。聚合操作可以将数据分组（或者不分组，即只有一组/每个记录都是一组）然后对每组数据执行多种批处理操作，最后返回结果。可以实现分组查询、取某些字段的统计值、流水线式分阶段处理、获取为唯一值等查询操作。</p><ul><li><p>数据库聚合操作符(AggregateCommand) $ ，通过 db.command.aggregate 获取</p></li><li><p>$ 符号加上字段名或嵌套字段名,嵌套字段名用点将嵌套的各级字段连接起来。如 $profile.name 就表示 profile.name 的字段路径。</p></li></ul><p>数据库集合的聚合操作实例 collection(..).aggregate()</p><ol><li>group({}) <ol><li>_id 参数是必填的，如果填常量则只有一组。其他字段是可选的，都是累计值，用 $.sum 等累计器，但也可以使用其他表达式。</li></ol></li><li>project({}) <ol><li>聚合阶段。把指定的字段传递给下一个流水线，指定的字段可以是某个已经存在的字段，也可以是计算出来的新字段。</li></ol></li><li>match({}) <ol><li>相当于 where({})</li><li>注意 match 阶段和其他聚合阶段不同，不可使用聚合操作符，只能使用查询操作符。</li></ol></li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注意这里哦，aggregate一定要加上，标记后面的查询为聚合阶段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _id:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//必传  返回值按name这个字段来分组 如果没有则就一组</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _id:{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         price:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 和基础模板不同的，在 aggregate 里只能用.end()结尾，返回的数据和 get()有所出入。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // .get()返回的是 data: [{name: &#39;Astroline&#39;}, {name: &#39;Eve&#39;}]；</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // .end()返回的是 list: [{name: &#39;Astroline&#39;}, {name: &#39;Eve&#39;}]；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  db.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    start: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    end: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;这是聚合实例(aggregate),聚合阶段里的聚合操作符 $&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    add_相加: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    subtract_相减差值: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    multiply_查乘: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">multiply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    abs_相减绝对值: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">subtract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$start&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ceil_向上取整: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ceil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    floor_向下取整: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    trunc_截断取整: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">trunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    divide_被除数与除数求商:$.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">divide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$end&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;$age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exp_取n次方: $.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    还有:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;算数运算操作符还有很多。。。&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="command" tabindex="-1">command <a class="header-anchor" href="#command" aria-label="Permalink to &quot;command&quot;">​</a></h2><ul><li>数据库操作符，通过 db.command 获取</li></ul><h2 id="transaction-事务" tabindex="-1">Transaction 事务 <a class="header-anchor" href="#transaction-事务" aria-label="Permalink to &quot;Transaction 事务&quot;">​</a></h2><p>可通过以下两种方式获得</p><ul><li>cloud.database().runTransaction(callback,times)</li><li>cloud.database().startTransaction(callback,times)</li></ul><ol><li><p>collection 获取集合引用</p><ul><li>在事务中仅能进行单记录操作，也就是不能使用 where、aggregate 接口，可以使用的接口如下：</li></ul><ol><li>add 新增记录</li><li>doc 获取记录引用 <ol><li>get 获取记录内容</li><li>update 更新记录内容 <blockquote><p>如果写入的数据相同 不变的话返回的 updated 就还是 0 所以不能以这个值来判断 如果更新的数据是一样的 那返回就是 0</p></blockquote></li><li>set 替换记录内容</li><li>remove 删除记录</li></ol></li></ol></li><li><p>commit 提交事务（仅在使用 startTransaction 时可调用）</p></li><li><p>rollback 终止事务并回滚</p></li></ol><h2 id="issue" tabindex="-1">issue <a class="header-anchor" href="#issue" aria-label="Permalink to &quot;issue&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> errCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">404011</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 报云函数执行出错（本地调试无问题，云端就会报错）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// cloudfunctions/api/index.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cloud)  这句代码在云端报以下这个错</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.vue:29 Error: errCode: -404011 cloud function execution error | errMsg: cloud.callFunction:fail requestID f195338c-9044-11eb-a9da-525400c2bfee, cloud function service error code -504002, error message TypeError: Cannot convert a Symbol value to a string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">原因是因为symbol不能转字符串，在打印cloud对象上  对面有symbol属性</span></span></code></pre></div><h1 id="云闪付" tabindex="-1"><a href="https://opentools.95516.com/applet/#/docs/develop/getstart/getstart?timestamp=1679908559831&amp;id1=develop&amp;id2=getstart" target="_blank" rel="noreferrer">云闪付</a> <a class="header-anchor" href="#云闪付" aria-label="Permalink to &quot;[云闪付](https://opentools.95516.com/applet/#/docs/develop/getstart/getstart?timestamp=1679908559831&amp;id1=develop&amp;id2=getstart)&quot;">​</a></h1><ol><li>随意创建一个项目 可直接创建-【展示 UPSDK 示例】</li><li>将本地服务地址直接在地址栏里粘贴回车 <ul><li>重点 <strong><em>要带/#/才能让开发者工具与服务连接</em></strong></li><li><strong><em><code>http://localhost:8080/#/</code></em></strong></li></ul></li></ol><h1 id="正则表达式" tabindex="-1"><code>正则表达式</code> <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;\`正则表达式\`&quot;">​</a></h1><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /**从地址中提取省市县*/</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+?</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(省</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">市</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">自治区</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">自治州</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">县</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">区)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;四川省成都市双流县幸福社区23号&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reg) 返回数组</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(字符串) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lastIndexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true | false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">search</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(查找的字符串或者正则表达式); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//-1 || &gt;=0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">String.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(正则表达式);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RegExp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">reg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//true || false</span></span></code></pre></div>`,55),t=[e];function p(h,k,r,d,o,E){return a(),i("div",null,t)}const u=s(n,[["render",p]]);export{g as __pageData,u as default};
