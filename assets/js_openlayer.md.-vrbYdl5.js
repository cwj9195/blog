import{_ as e,c as l,o as a,a2 as i}from"./chunks/framework.BvpWiaHw.js";const b=JSON.parse('{"title":"openlayer","description":"","frontmatter":{},"headers":[],"relativePath":"js/openlayer.md","filePath":"js/openlayer.md"}'),o={name:"js/openlayer.md"},r=i('<h1 id="openlayer" tabindex="-1">openlayer <a class="header-anchor" href="#openlayer" aria-label="Permalink to &quot;openlayer&quot;">​</a></h1><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h2><ul><li>map 图层 依次由下往上 <ul><li>图层-&gt;失量图形-&gt;marker-&gt;控件</li></ul></li></ul><h2 id="-1" tabindex="-1"><a class="header-anchor" href="#-1" aria-label="Permalink to &quot;&quot;">​</a></h2><ul><li>map</li><li>layers</li><li>source <ul><li>image</li><li>tile</li><li>vector</li></ul></li><li>feature <ul><li>geometry</li><li>style</li></ul></li></ul><h2 id="openlayers核心概念" tabindex="-1">openlayers核心概念 <a class="header-anchor" href="#openlayers核心概念" aria-label="Permalink to &quot;openlayers核心概念&quot;">​</a></h2><ol><li>一张Map是由很多<code>Layer</code>图层组成</li><li>一<code>Layer</code>对应一个<code>Source</code>矢量数量源</li><li>一个Source由很多<code>Feature</code>组成</li><li><code>Feature</code> 是 <code>Geometry</code>和<code>Style</code>组成</li></ol><h2 id="-2" tabindex="-1"><a class="header-anchor" href="#-2" aria-label="Permalink to &quot;&quot;">​</a></h2><ul><li>map地图</li><li><a href="http://linwei.xyz/ol3-primer/ch04/index.html" target="_blank" rel="noreferrer">view视图</a><blockquote><p>控制地图显示的中心位置，范围，层级等</p></blockquote></li><li><a href="http://linwei.xyz/ol3-primer/ch05/index.html" target="_blank" rel="noreferrer">Layer图层</a><blockquote><p>允许多个layer重叠在一起，相互之间互不干扰</p></blockquote></li><li><a href="http://linwei.xyz/ol3-primer/ch05/index.html" target="_blank" rel="noreferrer">Source数据源</a><blockquote><p>它是和图层一一对应的 ol.source.OSM就是其中的一种</p></blockquote></li><li><a href="http://linwei.xyz/ol3-primer/ch10/index.html" target="_blank" rel="noreferrer">Control控件</a><blockquote><p>它为用户提供了和地图交互的入口 我们在地图上看到的放大缩小按钮就是众多控件中的一种。控件具备相同的一个特性，就是一直保持在地图的某个固定位置，不会随着地图移动而移动，也不会随着地图放大缩小而变化，一直处于地图的最上层</p></blockquote></li><li>Interaction 交互</li></ul><h2 id="-3" tabindex="-1"><a class="header-anchor" href="#-3" aria-label="Permalink to &quot;&quot;">​</a></h2><h3 id="核心api和常用api" tabindex="-1">核心API和常用API <a class="header-anchor" href="#核心api和常用api" aria-label="Permalink to &quot;核心API和常用API&quot;">​</a></h3><ul><li>ol.Map：地图对象，用于显示地图和处理地图事件。包括设置地图的中心点、缩放级别、地图样式、添加图层等功能。</li><li>ol.View：视图对象，用于控制地图的视图参数，例如地图的中心点、缩放级别、旋转角度等。可以通过视图对象来实现地图的动态效果，例如缩放、平移、旋转等。</li><li>ol.layer：图层对象，用于添加地图数据和样式。包括各种类型的图层，例如瓦片图层、矢量图层、WMS图层等。可以通过图层对象来实现地图的数据可视化和交互效果。</li><li>ol.source：数据源对象，用于管理地图数据。包括各种类型的数据源，例如矢量数据源、WMS数据源、XYZ数据源等。可以通过数据源对象来加载和管理地图数据。</li><li>ol.style：样式对象，用于定义地图元素的渲染样式。包括各种类型的样式对象，例如点样式、线样式、面样式等。可以通过样式对象来实现地图元素的可视化效果。</li><li>ol.proj：投影对象，用于处理地图坐标系。包括各种类型的投影对象，例如Web Mercator投影、WGS84投影等。可以通过投影对象来实现地图的坐标系转换和投影变换。</li><li>ol.control：控件对象，用于添加地图控件。包括各种类型的控件，例如缩放控件、比例尺控件、全屏控件等。可以通过控件对象来实现地图控制和交互效果。</li><li>ol.interaction：交互对象，用于添加地图交互效果。包括各种类型的交互对象，例如拖拽交互、缩放交互、旋转交互等。可以通过交互对象来实现地图的交互效果。</li></ul><h3 id="高级api和技巧" tabindex="-1">高级API和技巧 <a class="header-anchor" href="#高级api和技巧" aria-label="Permalink to &quot;高级API和技巧&quot;">​</a></h3><ul><li>ol.format：格式化对象，用于将地图数据转换为指定格式的数据。包括各种类型的格式化对象，例如GeoJSON格式化对象、KML格式化对象、WKT格式化对象等。可以通过格式化对象来实现地图数据的格式转换和解析。</li><li>ol.source.Vector：矢量数据源对象，用于管理矢量数据。可以通过矢量数据源对象来添加、更新和删除矢量数据，例如点、线、面等。</li><li>ol.Feature：特征对象，用于表示地图元素的属性和几何信息。可以通过特征对象来设置地图元素的属性和样式，例如颜色、线宽、填充等。</li><li>ol.geom：几何对象，用于表示地图元素的几何信息。包括各种类型的几何对象，例如点、线、面等。可以通过几何对象来设置地图元素的几何信息，例如坐标、形状等。</li><li>ol.source.ImageWMS：WMS图片数据源对象，用于加载WMS图片数据。可以通过WMS图片数据源对象来加载WMS服务提供的地图图片，例如地图底图、影像等。</li><li>ol.source.TileWMS：WMS瓦片数据源对象，用于加载WMS瓦片数据。可以通过WMS瓦片数据源对象来加载WMS服务提供的地图瓦片，提高地图渲染效率和性能。</li><li>ol.source.OSM：OSM数据源对象，用于加载OpenStreetMap地图数据。可以通过OSM数据源对象来加载OpenStreetMap提供的地图数据，例如地图底图、标注等。</li></ul><h3 id="进阶api和技巧" tabindex="-1">进阶API和技巧 <a class="header-anchor" href="#进阶api和技巧" aria-label="Permalink to &quot;进阶API和技巧&quot;">​</a></h3><ul><li>ol.source.VectorTile：矢量瓦片数据源对象，用于加载矢量瓦片数据。可以通过矢量瓦片数据源对象来加载矢量瓦片数据，提高地图渲染效率和性能。</li><li>ol.format.MVT：Mapbox矢量瓦片格式化对象，用于将地图数据转换为Mapbox矢量瓦片格式。可以通过Mapbox矢量瓦片格式化对象来实现地图数据的高效传输和渲染。</li><li>ol.layer.VectorTile：矢量瓦片图层对象，用于显示矢量瓦片数据。可以通过矢量瓦片图层对象来显示矢量瓦片数据，提高地图渲染效率和性能。</li><li>ol.render：渲染对象，用于控制地图元素的渲染方式。可以通过渲染对象来设置地图元素的渲染优先级、渲染顺序等。</li><li>ol.Graticule：经纬网对象，用于显示地图的经纬网格。可以通过经纬网对象来实现地图的基本功能，例如坐标定位、距离测量等。</li><li>ol.control.MousePosition：鼠标位置控件对象，用于显示鼠标当前位置的坐标。可以通过鼠标位置控件对象来实现地图坐标定位和距离测量等功能。</li><li>ol.control.ScaleLine：比例尺控件对象，用于显示地图的比例尺信息。可以通过比例尺控件对象来实现地图比例尺的显示和调整。</li></ul>',16),t=[r];function n(c,h,u,p,d,s){return a(),l("div",null,t)}const _=e(o,[["render",n]]);export{b as __pageData,_ as default};
