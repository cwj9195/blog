import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.JknIMk6Q.js";const l="/blog/assets/240527.m9uYaW6R.png",E=JSON.parse('{"title":"packageManager","description":"","frontmatter":{},"headers":[],"relativePath":"js/packageManager.md","filePath":"js/packageManager.md"}'),n={name:"js/packageManager.md"},t=e(`<h1 id="packagemanager" tabindex="-1">packageManager <a class="header-anchor" href="#packagemanager" aria-label="Permalink to &quot;packageManager&quot;">​</a></h1><ul><li><a href="https://baijiahao.baidu.com/s?id=1726423980119026076&amp;wfr=spider&amp;for=pc" target="_blank" rel="noreferrer">nvm, npm, nrm, yarn, npx, pnpm 相关解释</a></li><li><a href="https://zhuanlan.zhihu.com/p/659824566" target="_blank" rel="noreferrer">pnpm&gt;yarn&gt;npm 优劣对比</a></li><li><a href="https://www.jianshu.com/p/c427ed4c45e1" target="_blank" rel="noreferrer">npm pnpm yarn</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>nvm</code> : node.js 版本管理工具; 不同项目可能需要不同版本的 node; 可以使用 nvm 来管理 node.js 版本</li><li><code>pnpm | yarn | npm</code><ul><li><code>pnpm.pnpx</code> : 避免全部安装, npm 包执行器. 我们可以使用 pnpx 来执行各种命令.</li><li><code>npm.npx</code> : 避免全部安装, npm 包执行器. 我们可以使用 npx 来执行各种命令.</li></ul></li><li><code>nrm</code> : npm 源的管理工具, 可以用来方便的切换 npm 源</li></ul></div><h2 id="nvm" tabindex="-1">nvm <a class="header-anchor" href="#nvm" aria-label="Permalink to &quot;nvm&quot;">​</a></h2><p>node.js 版本管理工具; 不同项目可能需要不同版本的 node; 可以使用 nvm 来管理 node.js 版本</p><ul><li><a href="https://github.com/nvm-sh/nvm/blob/master/README.md" target="_blank" rel="noreferrer">文档</a></li><li><a href="https://nvm.uihtm.com/" target="_blank" rel="noreferrer">官网 (没什么好看的) </a></li><li><a href="https://nodejs.org/en/download/package-manager" target="_blank" rel="noreferrer">node 官网建议的安装方式</a><ul><li>安装 <code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash</code></li></ul></li><li><a href="https://blog.csdn.net/m0_51340928/article/details/131878565" target="_blank" rel="noreferrer">Mac 安装 nvm 管理 node 和 npm 依赖 (M1 芯片) </a></li></ul><div class="tip custom-block"><p class="custom-block-title">useAge</p><ul><li><code>nvm ls|list</code> : 列出所有已安装的 node 版本</li><li><code>nvm i|install &lt; 16 | 18 | 20 &gt;</code> : 安装对应版本</li><li><code>nvm ls|list available</code> : 显示所有可下载的版本</li><li><code>nvm i latest</code> : 安装最新版 node</li><li><code>nvm i [node 版本号]</code> : 安装指定版本 node</li><li><code>nvm uni|uninstall [node 版本号]</code> : 删除已安装的指定版本</li><li><code>nvm use [node 版本号]</code> : 切换到指定版本 node</li><li><code>nvm current</code> : 当前 node 版本</li><li><code>nvm unalias [别名]</code> : 删除已定义的别名</li><li><code>nvm alias default &lt;node version(20)&gt;</code> : <a href="https://github.com/nvm-sh/nvm/blob/master/README.md#set-default-node-version" target="_blank" rel="noreferrer">设置默认节点版本 (全局)</a></li></ul></div><h2 id="nrm" tabindex="-1">nrm <a class="header-anchor" href="#nrm" aria-label="Permalink to &quot;nrm&quot;">​</a></h2><p>npm 源的管理工具, 可以用来方便的切换 npm 源</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><code>nrm ls</code>// 查看所有的支持源（有*号的表示当前所使用的源,以下[name]表示源的名称）</li><li><code>nrm use &lt;name&gt;　</code> 　// 将npm下载源切换成指定的源</li><li><code>nrm help</code>// 查看nrm帮助</li><li><code>nrm home &lt;name&gt;</code>　　// 跳转到指定源的官网</li><li><code>nrm add &lt;name url&gt;</code> //添加自定义源（name是自定义源的名字，ulr是自定义源的url）</li><li><code>nrm del &lt;name&gt; </code>//删除源</li><li><code>nrm test &lt;name&gt; </code>//test速度</li></ul></div><h2 id="pnpm-yarn-npm" tabindex="-1">pnpm | yarn | npm <a class="header-anchor" href="#pnpm-yarn-npm" aria-label="Permalink to &quot;pnpm | yarn | npm&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li><p>初始化</p><ul><li><code>npm init</code> 初始化项目</li></ul></li><li><p>安装</p><ul><li><code>npm install </code> 简<code>i</code> 安装依赖</li></ul></li><li><p>安装指定包</p><ul><li><code>npm install [pkgName] &lt;--option&gt;</code> 简<code>i</code> 安装指定包 <ol><li><code>&lt;--global&gt;</code> 简<code>-g</code> 全局安装</li><li><code>&lt;--save-dev&gt;</code> 简<code>-D</code> 安装到开发依赖 ——&gt; devDependencies</li><li><code>&lt;--save-prod&gt;</code> 简<code>-P</code> 安装到生产依赖 ——&gt; dependencies</li><li><code>&lt;--save&gt;</code> 简<code>-S</code> 与 <code>&lt;--save-prod&gt;</code>等效，默认可不写 <code> npm i xxx</code></li><li><code>&lt;--save-peer&gt;</code> 安装到对等依赖 (宿主依赖) ——&gt; peerDependencies</li></ol></li><li><code>pnpm [add | install | i] &lt;pkg&gt; &lt;--option&gt;</code></li></ul></li><li><p>移除</p><ul><li><code>npm uninstall &lt;pkg&gt;</code> 简<code>uni</code> 移除包</li><li><code>pnpm [remove | uninstall | uni] &lt;pkg&gt;</code> 简<code>uni</code> 移除包</li></ul></li><li><p><code>npm update &lt;pkg&gt;</code> 简<code>up</code> 更新包</p><ul><li><code>&lt;--latest&gt;</code> 更新到最新</li></ul></li><li><p><code>npm outdated</code> 检查过时包</p></li><li><p>执行脚本</p><ul><li><code>npm run &lt;script&gt;</code></li><li><code>npm &lt;script&gt;</code></li></ul></li><li><p>缓存</p><ul><li><code>npm cache clean &lt;--option&gt;</code> 清理缓存 <ul><li><code>&lt;--force&gt;</code> 简 <code>-f</code> 强制</li></ul></li><li><code>pnpm store prune</code> 清理缓存</li></ul></li><li><p><code>npm link</code> 链接本地包</p></li><li><p><code>npm unlink</code> 解除本地链接包</p></li><li><p><code>npm list &lt;--options&gt;</code> 简 <code>ls</code> 查看已安装包</p><ul><li><code>&lt;--depth[=0|1|2|3..]&gt;</code> 例 <code>pnpm ls -g --depth=0</code></li></ul></li><li><p><code>npm info &lt;pkg&gt;</code> 查看包信息</p></li><li><p><code>rm -rf node_modules &amp;&amp; pnpm -r exec rm -rf node_modules</code> 对应 <code>lerna clean</code> 在workspace下清除<code>node_modules</code></p></li><li><p><code>npm login</code> 登录</p></li><li><p><code>npm logout</code> 注销</p></li><li><p><code>npm publish</code> 发布</p><ul><li><code>npm publish --no-git-checks</code> 禁用 Git 分支检查, 直接在当前分支发布 (默认只允许在主分支发布)</li></ul></li><li><p><code>npm version patch</code> 更新包的命令, 更新成功会输出版本号, 版本号会自动加一, 此更新只针对本地而言.</p></li><li><p><code>npm unpublish mj-calculation@1.0.2</code> 删除指定版本, 成功会输出删除的版本号, 对应服务器也会删除.</p></li><li><p><code>npm unpublish mj-calculation &lt;--options&gt;</code> 撤销已发布的包</p><ul><li><code>&lt;--force&gt;</code> 强制撤销已发布的包 强制删除</li></ul></li></ul><p>新增别名<br><code>pnpm add &lt;pkg&gt;</code> 等效 <code>npm install &lt;pkg&gt;</code><br><code>pnpm remove &lt;pkg&gt;</code> 等效 <code>npm uninstall &lt;pkg&gt;</code><br><code>pnpm &lt;script&gt;</code> 等效 <code>npm run &lt;script&gt;</code></p></div><h3 id="动态包执行-npx-pnpx-pnpm-dlx-pnpm-exec" tabindex="-1">动态包执行 <code>npx</code> | <code>pnpx</code> | <code>pnpm dlx</code> | <code>pnpm exec</code> <a class="header-anchor" href="#动态包执行-npx-pnpx-pnpm-dlx-pnpm-exec" aria-label="Permalink to &quot;动态包执行 \`npx\` | \`pnpx\` | \`pnpm dlx\` | \`pnpm exec\`&quot;">​</a></h3><p><a href="https://www.5axxw.com/questions/content/mlm73z" target="_blank" rel="noreferrer">pnpm 创建, pnpx 和 dlx 之间的区别是什么? </a></p><ul><li>npm 包执行器, 您可以运行和执行软件包, 而无需在本地或全局安装它们. <ul><li>npx http-server dist npm i -g http-server &amp; http-server dist</li><li>npx @vue/cli create helloWord npm i -g @vue/cli &amp; vue create helloWord</li><li>使用npx代替nvm 切换node版本 <ul><li>npx -p node@10.0.0 npm install //指定node版本来安装项目依赖</li><li>npx -p node@7 -- node -v</li></ul></li></ul></li></ul><h3 id="pnpm" tabindex="-1"><a href="https://pnpm.io/zh/" target="_blank" rel="noreferrer">pnpm</a> <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;[pnpm](https://pnpm.io/zh/)&quot;">​</a></h3><ul><li><a href="https://blog.csdn.net/bobo789456123/article/details/132882778" target="_blank" rel="noreferrer">pnpm 实战教程</a></li><li><a href="https://www.5axxw.com/questions/content/mlm73z" target="_blank" rel="noreferrer">pnpm 创建, pnpx 和 dlx 之间的区别是什么? </a></li></ul><h3 id="什么是-peer-dependency-对等依赖" tabindex="-1">什么是 Peer Dependency （对等依赖）? <a class="header-anchor" href="#什么是-peer-dependency-对等依赖" aria-label="Permalink to &quot;什么是 Peer Dependency （对等依赖）?&quot;">​</a></h3><p><code>Peer dependency (对等依赖)</code> 是指一个包依赖于另一个包, 但并不直接安装这个依赖, 而是要求使用该包的项目也必须安装这个依赖. 这样可以确保两个包使用的是同一个版本的依赖, 避免版本冲突.</p><ul><li><code>&quot;peerDependencies&quot;: { &quot;vue&quot;: &quot;^3.4.27&quot; }</code> :::</li></ul><h2 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h2><p>package.json 是 Node.js 项目中一个重要的文件，用于定义项目的各种元数据。这个文件通常位于项目的根目录中， 包含了项目的基本信息、依赖项、脚本命令以及其他配置项。</p><p>其中字段属性有官方和非官方的</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//（非官方字段）指定模块系统的使用方式，&quot;commonjs&quot;，&quot;module&quot;，&quot;umd&quot;，&quot;json&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;types/index.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//（非官方字段）指定 TypeScript 类型声明文件（.d.ts 文件）的路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;typings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;types/index.d.ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//（非官方字段）跟上面 types 等效</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;exports&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//（非官方字段）当打包工具支持exports字段时（webpack、Rollup 等），以上main，browser，module，types四个字段都被忽略</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dist/index.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;packageManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm@8.10.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//包管理器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // pre &amp; post 脚本的前后生命周期脚本, 执行到某一脚本如果匹配到名称的前置和后置命令也会运行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;presomeScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;在 compress 脚本执行前执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;someScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postsomeScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;在 compress 脚本执行后执行&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // \`prepare\` , \`prepublish\` , \`prepublishOnly\` , \`prepack\` , \`postpack\` , \`dependencies\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        有一些特殊的生命周期脚本只在某些情况下发生. 这些脚本是在 \`pre&lt;event&gt; , post&lt;event&gt; 和 &lt;event&gt;\` 脚本之外发生的.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        - \`prepare\` {#package.json:prepare}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        - 在包装之前运行, 即 npm publish 和 npm pack</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        - 在本地 npm install 上运行, 不带任何参数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        - 运行在 prepublish 之后, prepublishOnly 之前</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.21.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~3.21.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表示安装 3.21.X 的最新版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3.21.0&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //表示安装 3.X.X 的最新版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 引擎</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;engines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;= 6.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;= 3.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pnpm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h3 id="资料" tabindex="-1">资料 <a class="header-anchor" href="#资料" aria-label="Permalink to &quot;资料&quot;">​</a></h3><ul><li><a href="https://docs.npmjs.com/cli/v10/configuring-npm/package-json" target="_blank" rel="noreferrer">package.json 官网</a></li><li><a href="https://pnpm.io/zh/package_json" target="_blank" rel="noreferrer">package.json (pnpm.io) </a></li><li><a href="https://zhuanlan.zhihu.com/p/627434408" target="_blank" rel="noreferrer">巧用 exports 和 typeVersions 提升 npm 包用户使用体验</a></li><li><a href="https://blog.csdn.net/Jernnifer_mao/article/details/131814593" target="_blank" rel="noreferrer">中高级前端必须掌握的package.json最新最全指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/603512841" target="_blank" rel="noreferrer">package.json 配置完全解读</a></li><li><a href="https://docs.npmjs.com/cli/v10/using-npm/scripts" target="_blank" rel="noreferrer">script脚本字段</a></li><li><a href="https://segmentfault.com/a/1190000008832423" target="_blank" rel="noreferrer">npm scripts 官方文档 (译) </a></li></ul><h2 id="npmrc-文件" tabindex="-1"><code>.npmrc</code> 文件 <a class="header-anchor" href="#npmrc-文件" aria-label="Permalink to &quot;\`.npmrc\` 文件&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/0cda4343d704" target="_blank" rel="noreferrer">关于项目中 .npmrc 文件</a></p><ul><li>开发中用于配置 npm (Node Package Manager) 行为的重要文件. 它允许开发者自定义 npm 的各种设置, 包括镜像源, 代理, 认证信息, 依赖管理等等</li><li>从 <code>npm | yarn</code> 项目迁移到 <code>pnpm</code> 时 可能会存在**对等依赖缺失 (peer dep) ** 可以在根目录创建 <a href="https://pnpm.io/zh/npmrc" target="_blank" rel="noreferrer">.npmrc 文件</a></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#.npmrc 文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shamefully</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hoist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #会将所有 peer dependencies 安装到顶层的 node_modules 文件夹中.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">peers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #自动安装任何缺少的非可选同级依赖关系.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">peer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #如果启用了此选项, 那么在依赖树中存在缺失或无效的 peer 依赖关系时, 命令将执行失败</span></span></code></pre></div><h2 id="npm-包-新技术" tabindex="-1">npm 包 &amp; 新技术 <a class="header-anchor" href="#npm-包-新技术" aria-label="Permalink to &quot;npm 包 &amp; 新技术&quot;">​</a></h2><p><img src="`+l+`" alt="alt text"></p><h3 id="_1-patch-package" tabindex="-1">1. <code>patch-package</code> <a class="header-anchor" href="#_1-patch-package" aria-label="Permalink to &quot;1. \`patch-package\`&quot;">​</a></h3><p>源码补丁神器—patch-package</p><p><a href="https://zhuanlan.zhihu.com/p/637121713" target="_blank" rel="noreferrer">深入解读 pnpm patch-package 的底层实现: 实现自定义忽略文件或目录的方法探索</a></p><h3 id="unjs-工具包集合" tabindex="-1"><a href="https://unjs.io/" target="_blank" rel="noreferrer">Unjs</a> 工具包集合 <a class="header-anchor" href="#unjs-工具包集合" aria-label="Permalink to &quot;[Unjs](https://unjs.io/) 工具包集合&quot;">​</a></h3><ul><li><a href="https://nitro.unjs.io/" target="_blank" rel="noreferrer">nitro</a> 创建具有所有必要功能的 Web 服务器并将其部署在您喜欢的任何地方.</li></ul><h3 id="nuxt-服务端渲染框架" tabindex="-1"><a href="https://nuxt.com/" target="_blank" rel="noreferrer">nuxt</a> 服务端渲染框架 <a class="header-anchor" href="#nuxt-服务端渲染框架" aria-label="Permalink to &quot;[nuxt](https://nuxt.com/) 服务端渲染框架&quot;">​</a></h3><h3 id="dom-镜像-传送门" tabindex="-1"><code>dom 镜像 传送门</code> <a class="header-anchor" href="#dom-镜像-传送门" aria-label="Permalink to &quot;\`dom 镜像 传送门\`&quot;">​</a></h3><ul><li>vue2 <a href="https://www.jianshu.com/p/25fa8bebac9d" target="_blank" rel="noreferrer"><code>portal-vue</code></a></li><li>vue3 <a href="https://cn.vuejs.org/guide/built-ins/teleport.html#teleport" target="_blank" rel="noreferrer"><code>&lt;Teleport /&gt;</code></a></li><li><a href="https://blog.csdn.net/weixin_49668076/article/details/132217311" target="_blank" rel="noreferrer">『vue2』Vue Portal 和『vue3』Teleport</a></li></ul><h3 id="http-server" tabindex="-1"><code>http-server</code> <a class="header-anchor" href="#http-server" aria-label="Permalink to &quot;\`http-server\`&quot;">​</a></h3><h3 id="vue-macros" tabindex="-1">Vue Macros <a class="header-anchor" href="#vue-macros" aria-label="Permalink to &quot;Vue  Macros&quot;">​</a></h3><p><a href="https://zhuanlan.zhihu.com/p/691061804" target="_blank" rel="noreferrer">你不知道的Vue最新功能：Vue Macros</a></p><h3 id="pagespy" tabindex="-1"><code>PageSpy</code> <a class="header-anchor" href="#pagespy" aria-label="Permalink to &quot;\`PageSpy\`&quot;">​</a></h3><ul><li><a href="https://mp.weixin.qq.com/s/Vcm4m5HQ7P6lc0q0nIlYfg" target="_blank" rel="noreferrer">web 远程调试 PageSpy 由货拉拉大前端开源的一款用于调试 H5 或者远程 web 项目的工具</a></li></ul><h3 id="changelogen" tabindex="-1"><code>changelogen</code> <a class="header-anchor" href="#changelogen" aria-label="Permalink to &quot;\`changelogen\`&quot;">​</a></h3><ul><li><p><a href="https://cloud.tencent.com/developer/article/1755709" target="_blank" rel="noreferrer">『Git』: Commit 规范 + CHANGELOG 生成</a></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bump:patch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changelogen --bump --output CHANGELOG.md --release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bump:minor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changelogen --bump --output CHANGELOG.md --release --minor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bump:major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changelogen --bump --output CHANGELOG.md --release --major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div></li></ul><h3 id="npm-run-all" tabindex="-1"><code>npm-run-all</code> <a class="header-anchor" href="#npm-run-all" aria-label="Permalink to &quot;\`npm-run-all\`&quot;">​</a></h3><ul><li>它允许你并行或串行地运行多个 npm 脚本 这个包提供三个命令, 分别是 <code>npm-run-all</code> <code>run-s</code> <code>run-p</code> , 其中后两个都是 npm-run-all 带参数的简写, 分别对应串行和并行.</li><li><a href="https://blog.csdn.net/gitblog_00080/article/details/136867473" target="_blank" rel="noreferrer">推荐项目: npm-run-all - 高效管理 Node.js 脚本工具</a></li><li><a href="https://juejin.cn/post/6854573216363446286" target="_blank" rel="noreferrer">npm-run-all 简化 script 配置</a></li></ul><h3 id="vercel-nitropack" tabindex="-1"><code>vercel</code> + <code>nitropack</code> <a class="header-anchor" href="#vercel-nitropack" aria-label="Permalink to &quot;\`vercel\` + \`nitropack\`&quot;">​</a></h3><ul><li><p><a href="https://www.cnblogs.com/echolun/p/17524216.html" target="_blank" rel="noreferrer">快速上手 vercel, 手把手教你白嫖部署上线你的个人项目</a></p></li><li><p><a href="https://www.kiwimore.com/nitropack-guide/" target="_blank" rel="noreferrer">NitroPack 教程: 如何使用新手友好型缓存插件提升网站速度? </a></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clear:vercel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rm -rf ./vercel.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build:vercel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run-s clear:vercel build:nitro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build:nitro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mist build nitro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start:nirto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node .output/server/index.mjs&quot;</span></span></code></pre></div></li></ul><h3 id="husky-lint-staged-eslint-commitlint" tabindex="-1"><code>husky</code> + <code>lint-staged</code> + <code>Eslint</code> + <code>commitlint</code> <a class="header-anchor" href="#husky-lint-staged-eslint-commitlint" aria-label="Permalink to &quot;\`husky\` + \`lint-staged\` + \`Eslint\` + \`commitlint\`&quot;">​</a></h3><h4 id="gitHook" tabindex="-1">git hook (git 生命周期函数 勾子) <a class="header-anchor" href="#gitHook" aria-label="Permalink to &quot;git hook (git 生命周期函数 勾子) {#gitHook}&quot;">​</a></h4><ul><li><a href="https://blog.csdn.net/cookcyq__/article/details/125457031" target="_blank" rel="noreferrer">代码规范 &amp; 详细解释 husky、prettier、eslint、lint-staged 的作用和使用</a></li><li><a href="https://blog.csdn.net/du_aitiantian/article/details/130326158" target="_blank" rel="noreferrer">详细说明使用husky规范前端项目搭建</a></li><li><a href="https://zhuanlan.zhihu.com/p/682777421" target="_blank" rel="noreferrer">前端代码规范最佳实践,开启高效开发之旅！(ESLint + Prettier + Stylelint + husky + lint-staged+Commitizen)</a></li></ul><h4 id="husky" tabindex="-1"><a href="https://typicode.github.io/husky/" target="_blank" rel="noreferrer">husky</a> <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;[husky](https://typicode.github.io/husky/)&quot;">​</a></h4><ul><li>可以防止使用 Git hooks 的一些不好的 commit 或者 push。</li><li>操作git hook的工具，主要实现代码提交前 eslint 校验和 commit 信息的规范校验,也可以避免多人合作时代码格式化不统一造成的冲突</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/pre-commit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 写入多行 cat &lt;&lt;EOF</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./.husky/pre-commit</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">. &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(dirname -- &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0&quot;)/_/husky.sh&quot; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">start=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(date +%s)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npx lint-staged</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">end=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(date +%s)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">time=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">((end - start))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">echo &quot;代码执行时间：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">time 秒&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/commit-msg</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./.husky/commit-msg</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">. &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(dirname -- &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0&quot;)/_/husky.sh&quot; </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npx commitlint -E HUSKY_GIT_PARAMS</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><ul><li>忽略 <code>pre-commit</code> 钩子，直接提交上去。 <ul><li><code>git commit -m &#39;msg&#39; --no-verify</code></li><li><code>git commit -m &#39;msg&#39; -n</code></li></ul></li></ul><h4 id="eslint" tabindex="-1"><a href="https://eslint.org/docs/latest/" target="_blank" rel="noreferrer">eslint</a> <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;[eslint](https://eslint.org/docs/latest/)&quot;">​</a></h4><p>如果eslint格式化无法生效，可以在vscode-终端-输出-Eslint插件 查看报错信息</p><ul><li><p><a href="https://zh-hans.eslint.org/docs/latest/use/getting-started" target="_blank" rel="noreferrer">eslint中文</a></p></li><li><p><a href="https://eslint.nodejs.cn/docs/latest/" target="_blank" rel="noreferrer">eslint翻译</a></p></li><li><p><a href="https://zh-hans.eslint.org/docs/latest/use/configure/configuration-files-new" target="_blank" rel="noreferrer">Eslint</a></p><ul><li>当 eslint 不起作用时 在 『终端-输出-eslint』查看报错信息</li></ul></li><li><p><a href="https://segmentfault.com/q/1010000015852118" target="_blank" rel="noreferrer">eslint 插件跟 eslint 包啥区别 webpack 安装 eslint 插件, vscode 中也有 eslint 插件, 有啥区别? </a></p></li><li><p>标签忽略单行 <code>&lt;!-- eslint-disable-next-line --&gt;</code></p></li></ul><h4 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;lint-staged&quot;">​</a></h4><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;**/*.{vue,ts,js,jsx,tsx}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint --config eslint.config.js --fix&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>让 <code>eslint</code> 只检查&amp;修复 暂存区的 文件 有没有办法能让这些工具只检查&amp;修复我们修改过的文件就好呢？ lint-staged 就可以做到。 lint-staged 能让这些插件只扫描暂存区的文件而不是全盘扫描</p><h4 id="配置迁移指南" tabindex="-1"><a href="https://zh-hans.eslint.org/docs/latest/use/configure/migration-guide" target="_blank" rel="noreferrer">配置迁移指南</a> <a class="header-anchor" href="#配置迁移指南" aria-label="Permalink to &quot;[配置迁移指南](https://zh-hans.eslint.org/docs/latest/use/configure/migration-guide)&quot;">​</a></h4><p>这份指南概述了如何将 ESLint 配置文件从 eslintrc 格式（通常配置在 .eslintrc.js 或 .eslintrc.json 文件中）迁移到新的平面配置格式（通常配置在 eslint.config.js 文件中）。</p><ul><li><p>从 ESLint v9.0.0 开始，平面配置文件格式将成为默认的配置文件格式。一旦发布了 ESLint v9.0.0，你可以在没有任何额外配置的情况下开始使用平面配置文件格式。</p><ul><li><code>eslint@^9.0.0</code>使用<code>eslint.config.[js|cjs|yaml|yml|json]</code>新的配置文件系统,需要在项目根目录放置 <ul><li>且vscode插件需要配置<code>&quot;eslint.experimental.useFlatConfig&quot;: true,</code>来启动该扁平配置系统</li></ul></li></ul></li><li><p>要在 ESLint v8 中使用平面配置，请在项目根目录中放置一个 eslint.config.js 文件或将 ESLINT_USE_FLAT_CONFIG 环境变量设置为 true。</p><ul><li><code>eslint@8.0.0</code> eslint默认使用 <code>eslintrc.[js|cjs|yaml|yml|json]</code> (旧的配置系统)</li></ul></li></ul><h4 id="commitlint-commitlint-提交规范" tabindex="-1">commitlint (commitlint 提交规范) <a class="header-anchor" href="#commitlint-commitlint-提交规范" aria-label="Permalink to &quot;commitlint (commitlint 提交规范)&quot;">​</a></h4><p><a href="https://commitlint.js.org/" target="_blank" rel="noreferrer">官网</a><a href="https://zhuanlan.zhihu.com/p/646582294" target="_blank" rel="noreferrer">使用 Husky 和 Commitlint 构建 Git 提交规范</a></p><ul><li>@commitlint/cli<code>@18.0.0 </code></li><li>@commitlint/config-conventional<code>@18.0.0</code></li></ul><p><code>pnpm add @commitlint/cli@18.0.0 @commitlint/config-conventional@18.0.0 -D</code></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>这里建议直接都使用V18版本!!!!!!!!!</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>因为刚开始安装这两个依赖为最新时出现了 以下问题，尝试了改配置文件依然无法解决，包括网上相关问题也比较少</p><p>Error [ERR_UNSUPPORTED_DIR_IMPORT]: Directory import &#39;/Users/amoy/Desktop/project/cckg/order/node_modules/.pnpm/@commitlint+config-conventional@18.6.3/node_modules/@commitlint/config-conventional/lib&#39; is not supported resolving ES modules imported from /Users/amoy/Desktop/project/cckg/order/node_modules/.pnpm/@commitlint+config-conventional@18.6.3/node_modules/@commitlint/config-conventional/wrapper.mjs</p></div><p><a href="https://blog.csdn.net/qq_38290251/article/details/111646491" target="_blank" rel="noreferrer">Commitlint 使用总结</a></p><p><code>&lt;type&gt;[optional scope]: &lt;description&gt;</code></p><ul><li><code>type</code> ：用于表明我们这次提交的改动类型，是新增了功能？还是修改了测试代码？又或者是更新了文档？</li><li><code>optional scope</code>：一个可选的修改范围。用于标识此次提交主要涉及到代码中哪个模块。</li><li><code>description</code>：一句话描述此次提交的主要内容，做到言简意赅。</li><li>注意，英文冒号 + 空格</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commitlint.config.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@commitlint/config-conventional&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;type-enum&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;always&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;feat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新功能</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;fix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 修复问题</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;docs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文档改变</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;style&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 样式（不影响代码运行的变动）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;refactor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重构（即不是新增功能，也不是修改bug的代码变动）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;perf&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 性能优化</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;test&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 增加测试</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;build&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 构建过程或辅助工具的变动</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;ci&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 改变持续集成的配置文件和 package 中的 scripts 命令</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;chore&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他改变（比如依赖更新）</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &#39;revert&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代码回退</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;subject-case&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;never&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;upper-case&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提交信息的主题不能是大写</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;header-max-length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;always&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 提交信息的长度不能超过999个字符</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="esno" tabindex="-1"><code>esno</code> <a class="header-anchor" href="#esno" aria-label="Permalink to &quot;\`esno\`&quot;">​</a></h3><ul><li><p><code>node demo.js</code> -&gt; <code>esno demo.ts</code></p></li><li><p>和 <code>ts-node</code> 一样 可以直接执行 ts 文件 <code>ts-node demo.ts</code></p></li><li><p><a href="https://blog.csdn.net/u012384510/article/details/122974932" target="_blank" rel="noreferrer">又一个基于 Esbuild 的神器! esno</a></p></li><li><p><a href="https://juejin.cn/post/7151307918715912228" target="_blank" rel="noreferrer">esno &amp; tsx 原理初探</a></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dir-tree&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esno ./scripts/dir-tree&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gen:uno&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esno ./scripts/gen-unocss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toJS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esno scripts/to-js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div></li></ul><h3 id="终端格式化" tabindex="-1"><code>picocolors</code> | <code>Chalk</code> | <code>consola</code> <a class="header-anchor" href="#终端格式化" aria-label="Permalink to &quot;\`picocolors\` | \`Chalk\` | \`consola\` {#终端格式化}&quot;">​</a></h3><ul><li><p><code>picocolors</code> 和 <code>Chalk</code> 一样, picocolors 也是一个终端文本着色库. 它自称是 &quot;用 ANSI 颜色进行终端输出格式化的最小, 最快的库&quot;.</p></li><li><p><a href="https://www.jianshu.com/p/edd3d191bb64" target="_blank" rel="noreferrer">控制台打印佛祖</a></p></li><li><p><a href="https://www.bootschool.net/ascii" target="_blank" rel="noreferrer">英文转 ASCII 艺术字</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    ██████████               ██     ██ ██</span></span>
<span class="line"><span>  ░░░░░██░░░               ░██    ░██░██</span></span>
<span class="line"><span>      ░██      █████       ░██    ░██░██</span></span>
<span class="line"><span>      ░██     ██░░░██ █████░██    ░██░██</span></span>
<span class="line"><span>      ░██    ░██  ░░ ░░░░░ ░██    ░██░██</span></span>
<span class="line"><span>      ░██    ░██   ██      ░██    ░██░██</span></span>
<span class="line"><span>      ░██    ░░█████       ░░███████ ░██</span></span>
<span class="line"><span>      ░░      ░░░░░         ░░░░░░░  ░░</span></span>
<span class="line"><span>  _________  ________                ___  ___  ___</span></span>
<span class="line"><span>  |\\___   ___\\\\   ____\\              |\\  \\|\\  \\|\\  \\</span></span>
<span class="line"><span>  \\|___ \\  \\_\\ \\  \\___|  ____________\\ \\  \\\\\\  \\ \\  \\</span></span>
<span class="line"><span>      \\ \\  \\ \\ \\  \\    |\\____________\\ \\  \\\\\\  \\ \\  \\</span></span>
<span class="line"><span>        \\ \\  \\ \\ \\  \\___\\|____________|\\ \\  \\\\\\  \\ \\  \\</span></span>
<span class="line"><span>        \\ \\__\\ \\ \\_______\\             \\ \\_______\\ \\__\\</span></span>
<span class="line"><span>          \\|__|  \\|_______|              \\|_______|\\|__|</span></span></code></pre></div></li></ul><h3 id="rollup-plugin-visualizer" tabindex="-1"><code>rollup-plugin-visualizer</code> <a class="header-anchor" href="#rollup-plugin-visualizer" aria-label="Permalink to &quot;\`rollup-plugin-visualizer\`&quot;">​</a></h3><ul><li>打包体积分析插件 rollup-plugin-visualizer 视图分析</li><li><a href="https://zhuanlan.zhihu.com/p/660064289?utm_id=0" target="_blank" rel="noreferrer">记一次 vite 打包优化及插件使用</a></li></ul><h3 id="unplugin-vue-components-vite-antdv-component-resolver" tabindex="-1"><code>unplugin-vue-components/vite</code> + <code>antdv-component-resolver</code> <a class="header-anchor" href="#unplugin-vue-components-vite-antdv-component-resolver" aria-label="Permalink to &quot;\`unplugin-vue-components/vite\` + \`antdv-component-resolver\`&quot;">​</a></h3><ul><li>组件按需引入</li></ul><h3 id="depcheck" tabindex="-1"><code>depcheck</code> <a class="header-anchor" href="#depcheck" aria-label="Permalink to &quot;\`depcheck\`&quot;">​</a></h3><ul><li><a href="https://blog.csdn.net/black_cat7/article/details/133854985" target="_blank" rel="noreferrer">depcheck 检查项目依赖的安装情况-帮你解决各种项目运行灵异事件</a></li></ul><h3 id="jsdoc" tabindex="-1"><code>JSDoc</code> <a class="header-anchor" href="#jsdoc" aria-label="Permalink to &quot;\`JSDoc\`&quot;">​</a></h3><ul><li><a href="https://jsdoc.bootcss.com/" target="_blank" rel="noreferrer">JSDoc</a></li></ul><h3 id="jsdom-happy-dom" tabindex="-1"><code>jsdom</code> | <code>happy-dom</code> <a class="header-anchor" href="#jsdom-happy-dom" aria-label="Permalink to &quot;\`jsdom\` | \`happy-dom\`&quot;">​</a></h3><ul><li><a href="https://jianshu.com/p/edce5473bbc3" target="_blank" rel="noreferrer">JSDOM 介绍</a></li><li>在 node 环境中模拟浏览器 , JSDOM 将浏览器 API 引入 Node.js</li></ul><h3 id="vitest-jest" tabindex="-1"><code>vitest</code> | <code>jest</code> <a class="header-anchor" href="#vitest-jest" aria-label="Permalink to &quot;\`vitest\` | \`jest\`&quot;">​</a></h3><ul><li><p><a href="https://cn.vitest.dev/" target="_blank" rel="noreferrer">vitest</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>常用的测试方案大致分为有 4 种:</span></span>
<span class="line"><span>  端对端测试: 利用一个很像用户行为的机器人来和 App 交互, 并验证功能是否正常. 有时也会说 &quot;功能测试&quot;或 E2E.</span></span>
<span class="line"><span>  集成测试: 验证多个单元是否能协调共同工作.</span></span>
<span class="line"><span>  单元测试: 验证单独隔离的部分是否正常工作.</span></span>
<span class="line"><span>  静态测试: 捕获写代码时的错别字和类型错误</span></span></code></pre></div></li></ul><h3 id="treeify" tabindex="-1"><code>treeify</code> <a class="header-anchor" href="#treeify" aria-label="Permalink to &quot;\`treeify\`&quot;">​</a></h3><ul><li>将扁平数组转成树型结构 arr to tree</li></ul><h3 id="directory-tree" tabindex="-1"><code>directory-tree</code> <a class="header-anchor" href="#directory-tree" aria-label="Permalink to &quot;\`directory-tree\`&quot;">​</a></h3><ul><li><p><a href="https://npm.devtool.tech/directory-tree" target="_blank" rel="noreferrer">创建一个表示目录树的 JavaScript 对象. </a></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">photos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── summer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── june</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └── windsurf.jpg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── winter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    └── january</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ├── ski.png</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        └── snowboard.jpg</span></span></code></pre></div></li></ul><h3 id="fs-extra" tabindex="-1"><code>fs-extra</code> <a class="header-anchor" href="#fs-extra" aria-label="Permalink to &quot;\`fs-extra\`&quot;">​</a></h3><ul><li><a href="https://www.bilibili.com/read/cv25095453/" target="_blank" rel="noreferrer">替代 Node.js 内置 fs 模块, 更安全, 更强大的文件操作库</a></li></ul><h3 id="execa-shelljs-listr" tabindex="-1"><code>execa</code> <code>shelljs</code> <code>listr</code> <a class="header-anchor" href="#execa-shelljs-listr" aria-label="Permalink to &quot;\`execa\` \`shelljs\` \`listr\`&quot;">​</a></h3><ul><li>命令行操作</li></ul><h3 id="终端相关-开发脚手架" tabindex="-1">终端相关 开发脚手架 <a class="header-anchor" href="#终端相关-开发脚手架" aria-label="Permalink to &quot;终端相关 开发脚手架&quot;">​</a></h3><ul><li>如何解析命令行输入? <ul><li><code>process.argv</code></li><li><code>minimist</code> - 命令行参数解析引擎</li><li><code>arg</code> - 简单的参数解析</li><li><code>nopt</code> - Node/npm 参数解析</li></ul></li><li>如何让用户能与命令行进行交互 <ul><li><code>Inquirer.js</code> - 通用可交互命令行工具集合.</li><li><code>prompts</code> - 轻量, 美观, 用户友好的交互式命令行提示.</li><li><code>Enquirer</code> - 用户友好, 直观且易于创建的时尚 CLI 提示.</li></ul></li><li>如何在命令行中显示进度条? <ul><li><code>progress</code> - Node.js 的灵活 ascii 进度条.</li><li><code>progress-estimator</code> - 记录进度条并估计完成承诺所需的时间.</li></ul></li><li>如何在命令行执行多任务? <ul><li><code>listr</code> - 命令行任务列表.</li></ul></li><li>如何给命令行&quot;锦上添花&quot;? <ul><li><code>chalk</code> - 命令行字符串样式美化工具.</li><li><code>ora</code> - 优雅的命令行 loading 效果.</li><li><code>colors.js</code> - 获取 Node.js 控制台的颜色.</li><li><code>qrcode-terminal</code> - 命令行中显示二维码.</li><li><code>treeify</code> - 将 javascript 对象漂亮地打印为树.</li><li><code>kleur</code> - 最快的 Node.js 库, 使用 ANSI 颜色格式化命令行文本.</li></ul></li></ul><h3 id="解析工具" tabindex="-1">解析工具 <a class="header-anchor" href="#解析工具" aria-label="Permalink to &quot;解析工具&quot;">​</a></h3><ul><li>如何解析 markdown? <ul><li><code>marked</code> - Markdown 解析器和编译器, 专为提高速度而设计.</li><li><code>remark</code> - Markdown 处理工具.</li><li><code>markdown-it</code> -支持 100%通用 Markdown 标签解析的扩展&amp;语法插件.</li></ul></li><li>如何解析 csv? <ul><li><code>PapaParse</code> - 快速而强大的 CSV (分隔文本) 解析器, 可以优雅地处理大文件和格式错误的输入.</li><li><code>node-csv</code> - 具有简单 api 的全功能 CSV 解析器, 并针对大型数据集进行了测试.</li><li><code>csv-parser</code> -旨在比其他任何人都快的流式 CSV 解析器.</li></ul></li><li>如何解析 xml? <ul><li><code>xml2js</code> - 将 XML 转换为 JavaScript 对象的转换器.</li><li><code>fast-xml-parser</code> - 具验证&amp;解析 XML.</li></ul></li></ul><h2 id="nexus-企业-npm私有库" tabindex="-1">nexus 企业 npm私有库 <a class="header-anchor" href="#nexus-企业-npm私有库" aria-label="Permalink to &quot;nexus 企业 npm私有库&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/5bf288a2d461" target="_blank" rel="noreferrer">10分钟，手把手教你搭建一个npm私有库</a><br><a href="https://mp.weixin.qq.com/s/rkyK6lIXOneHGNZncIAUKQ" target="_blank" rel="noreferrer">企业级私有仓库</a></p><p>特定的依赖我们在项目的 <code>.npmrc </code>中指定 registry，或对某个具体的依赖特殊设置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>axios=http://mirrors.tools.xxx.com/axios/</span></span>
<span class="line"><span>@tc-ui/components=http://10.0.4.102:30162/repository/npm_cwj/@tc-ui/components</span></span>
<span class="line"><span>registry=https://registry.npmmirror.com</span></span></code></pre></div><h2 id="chrome-插件" tabindex="-1">chrome 插件 <a class="header-anchor" href="#chrome-插件" aria-label="Permalink to &quot;chrome 插件&quot;">​</a></h2><ul><li><code>Console Import</code><ul><li>浏览器里可以直接调试各种包 安装浏览器插件 <code>Console Import</code> 可以在控制台直接 <code>$i([packageName])</code> 导入包 就可以直接在控制台调试 <code>$i(&#39;dayjs&#39;)</code></li></ul></li></ul><h2 id="工具网站" tabindex="-1">工具网站 <a class="header-anchor" href="#工具网站" aria-label="Permalink to &quot;工具网站&quot;">​</a></h2><ul><li><p><code>Unicode Emoji</code> 表情符号 🎉</p><ul><li><a href="https://www.emojiall.com/zh-hans" target="_blank" rel="noreferrer">Unicode 块: 😀 表情符号 | EmojiAll</a></li><li><a href="https://www.emojiall.com/zh-hant" target="_blank" rel="noreferrer">🔢 Unicode 版本列表 | EmojiAll 繁体</a></li><li><a href="https://www.w3school.com.cn/charsets/ref_emoji.asp" target="_blank" rel="noreferrer">Emoji Unicode 参考手册</a></li><li><a href="https://blog.csdn.net/qq_36380426/article/details/108016275" target="_blank" rel="noreferrer">『拓展』谈谈字符编码: Unicode 编码与 emoji 表情编码</a></li></ul></li><li><p><a href="https://www.bootschool.net/ascii" id="ascii" target="_blank" rel="noreferrer">英文转 ASCII 艺术字</a></p></li><li><p><a href="https://npm.devtool.tech/" target="_blank" rel="noreferrer">npm.devtool.tech</a></p><ul><li>最直观的查看流行的 npm 包</li><li><strong>可以在控制台直接调用调试某个 npm 包</strong></li><li>上传 package.json 查看该项目的技术栈, 你可以层层递进点进去, 了解各个依赖 package 的用途</li></ul></li><li><p><a href="https://www.zhihu.com/question/20241338" target="_blank" rel="noreferrer">前端工程师都有用哪些比较靠谱的小工具? </a></p></li><li><p><a href="https://caniuse.com/" target="_blank" rel="noreferrer">https://caniuse.com/</a></p></li><li><p>在线开发工具 IDE</p><ul><li><a href="https://stackblitz.com/" target="_blank" rel="noreferrer">stackblitz - webContainer</a><ul><li>除了支持前端项目外, 还支持在浏览器中运行 <code>Node.js</code> 环境;</li></ul></li><li><a href="https://codepen.io/" target="_blank" rel="noreferrer">CodePen</a></li><li><a href="https://codesandbox.io/" target="_blank" rel="noreferrer">CodeSandBox</a></li><li><a href="https://jsfiddle.net/" target="_blank" rel="noreferrer">JSFiddle</a><ul><li>JsFiddle 非常受欢迎. 它也是在 StackOverflow 上展示解决方案最常用的 IDE.</li></ul></li><li><a href="https://playcode.io/" target="_blank" rel="noreferrer">playcode</a></li><li><a href="https://jsbin.com/" target="_blank" rel="noreferrer">JsBin</a></li><li><a href="https://code.juejin.cn/" target="_blank" rel="noreferrer">码上掘金</a></li></ul></li><li><p><a href="https://json2ts.com/" target="_blank" rel="noreferrer">图片压缩</a></p></li></ul>`,113),p=[t];function r(h,o,d,c,k,u){return a(),i("div",null,p)}const m=s(n,[["render",r]]);export{E as __pageData,m as default};
