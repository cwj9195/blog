import{_ as s,c as i,o as a,a4 as p}from"./chunks/framework.JknIMk6Q.js";const E=JSON.parse('{"title":"monorepo","description":"","frontmatter":{},"headers":[],"relativePath":"js/monorepo.md","filePath":"js/monorepo.md"}'),e={name:"js/monorepo.md"},n=p(`<h1 id="monorepo" tabindex="-1">monorepo <a class="header-anchor" href="#monorepo" aria-label="Permalink to &quot;monorepo&quot;">​</a></h1><p>Monorepo <b style="color:red;">是一种项目代码管理方式 </b><br> 中文：多包存储库。就是单个项目仓库 (repository)，其中包含多个开发项目 project (模块 module，或包 package)。虽然这些 project 也许是相关联的，但它们通常在逻辑上相互独立，并被不同的团队负责编写，运行。</p><ol><li>可以使用<code>git submodule</code></li><li><a href="https://www.zhihu.com/question/505956571" target="_blank" rel="noreferrer">Turborepo</a> Turborepo 是针对 Monorepo 的增强工具 <ol><li>Turborepo 是一个为 monorepo 而生的极快的构建系统</li></ol></li></ol><p><a href="https://mp.weixin.qq.com/s/UXH2MMppJN_4tigckAefJw" target="_blank" rel="noreferrer">深度好文——基于 PNPM Monorepo 的组件库研发方案调研</a></p><h2 id="个人理解" tabindex="-1">个人理解 <a class="header-anchor" href="#个人理解" aria-label="Permalink to &quot;个人理解&quot;">​</a></h2><p>1、个人对Monoreop的理解 个人认为 Monoreop 实质就是 组件（依赖）抽离。即，将多个项目的公共依赖抽取到特定位置，使得项目不必重复安装和维护公共组件（依赖）。</p><p>比如，有多个 Vue 项目都依赖一个公共的组件库 element-plus。如果采用 ==multirepo==，那么此时在每个项目的根目录中就需要多次安装 element-plus。</p><p>更复杂一点的场景，如果 我们对 element-plus 中 Table 组件进行了二次封装，那么就需要在每个项目中都需要写封装代码。特别是，涉及到公共组件的bug修复，不可避免地需要修改多个项目的相同组件。</p><p>如果采用 ==monorepo==，此时只需要在根目录下载一次 element-plus，多个项目就能够使用该组件。对于公共组件的封装和修改也是一样。</p><h2 id="pnpm-内置了对单一存储库-也称为多包存储库、多项目存储库或单体存储库-的支持" tabindex="-1">pnpm 内置了对单一存储库（也称为多包存储库、多项目存储库或单体存储库）的支持， <a class="header-anchor" href="#pnpm-内置了对单一存储库-也称为多包存储库、多项目存储库或单体存储库-的支持" aria-label="Permalink to &quot;pnpm 内置了对单一存储库（也称为多包存储库、多项目存储库或单体存储库）的支持，&quot;">​</a></h2><p><a href="https://zhuanlan.zhihu.com/p/644129345" target="_blank" rel="noreferrer">极简 pnpm-&gt;monorepo 使用指南</a></p><p>你可以创建一个 workspace 以将多个项目合并到一个仓库中。</p><p>一个 workspace 的根目录下必须有 pnpm-workspace.yaml 文件， 也可能会有 .npmrc 文件。</p><ol><li>使用<code>pnpm</code>的<a href="https://pnpm.io/zh/workspaces" target="_blank" rel="noreferrer">workspace</a></li><li>定义 <a href="https://pnpm.io/zh/pnpm-workspace_yaml" target="_blank" rel="noreferrer">workspace</a>(在项目根目录下创建pnpm-workspace.yaml)</li></ol><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># pnpm-workspace.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">packages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">packages/**</span></span></code></pre></div><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// package.json 中批处理子模块</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm -r --filter=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./packages/**/*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm -r --filter=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./packages/**/*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm lint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm test &amp;&amp; pnpm -r publish&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定使用 workspace 中的模块，而不是 npm register</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;devDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@nuxt/devtools&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;@nuxt/devtools-ui-kit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;workspace:*&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><h2 id="依赖" tabindex="-1">依赖 <a class="header-anchor" href="#依赖" aria-label="Permalink to &quot;依赖&quot;">​</a></h2><ul><li>公用的依赖安装在主仓中 <ul><li><code>pnpm add prettier -D -w</code> 如prettier，eslint</li></ul></li><li>专用的依赖安装在子仓中 <ul><li><code>pnpm add xxx --filter subProject1</code></li></ul></li></ul>`,18),t=[n];function l(o,h,r,k,d,c){return a(),i("div",null,t)}const g=s(e,[["render",l]]);export{E as __pageData,g as default};
