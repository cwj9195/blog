import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.JknIMk6Q.js";const c=JSON.parse('{"title":"vite","description":"","frontmatter":{},"headers":[],"relativePath":"js/vite.md","filePath":"js/vite.md"}'),n={name:"js/vite.md"},e=t(`<h1 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;vite&quot;">​</a></h1><p><a href="#http.host=0.0.0.0">host:0.0.0.0</a></p><ul><li><a href="https://developer.aliyun.com/article/1377523" target="_blank" rel="noreferrer">一个比较老的公司项目</a>，webpack用的v3版本，为了实现<code>本机和局域网设备</code>可以同时访问，webpack的devServer里的host我们一般会设置成 0.0.0.0，这样本机所有 ipv4 地址都可以实现访问。</li></ul><h2 id="环境变量-import-meta-env" tabindex="-1">环境变量 <code>import.meta.env</code> <a class="header-anchor" href="#环境变量-import-meta-env" aria-label="Permalink to &quot;环境变量 \`import.meta.env\`&quot;">​</a></h2><p>Vite 使用 <a href="#dotenv">dotenv</a> 从你的 环境目录 中的<code>.env**</code>文件加载额外的环境变量</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    MODE: {string} 应用运行的模式。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    BASE_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {string} 部署应用时的基本 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">。他由base 配置项决定。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    PROD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {boolean} 应用是否运行在生产环境（使用 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 运行开发服务器或构建应用时使用 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NODE_ENV</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;production&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ）。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    DEV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {boolean} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">应用是否运行在开发环境</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (永远与 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.PROD相反)。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    SSR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {boolean} 应用是否运行在 server 上。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="cross-env" tabindex="-1">cross-env <a class="header-anchor" href="#cross-env" aria-label="Permalink to &quot;cross-env&quot;">​</a></h3><h3 id="dotenv-点env-env" tabindex="-1">dotenv（点env .env）<a id="dotenv"></a> <a class="header-anchor" href="#dotenv-点env-env" aria-label="Permalink to &quot;dotenv（点env .env）&lt;a id=&quot;dotenv&quot;&gt; &lt;/a&gt;&quot;">​</a></h3><blockquote><p>可以使dotenv库来读取.env文件中的配置信息，并将其作为环境变量使用。这样，在应用程序中就可以方便地访问和使用这些配置项。</p></blockquote><p>环境配置文件 :<code>[.env] [.env.development] [.env.production] [.env.test]</code></p><ul><li>每一行都是一个配置项，键和值之间使用等号（=）或冒号（:）进行分隔</li><li><code>.env</code>是默认的环境配置文件，其中包含通用的配置项。在开发和生产环境下都可以使用这个文件，但通常不应包含敏感信息</li><li><code>.env.development</code>是用于开发环境的配置文件。你可以在其中包含开发环境特定的配置项，如调试标志、日志级别等。\`</li><li><code>.env.production</code>是用于生产环境的配置文件。你可以在其中包含生产环境特定的配置项，如数据库连接信息、API密钥等。这个文件通常只包含生产环境中需要的配置项，而不包含开发环境特有的配置。\`</li><li><code>.env.test</code> 是用于测试环境的配置文件。你可以在其中指定在单元测试或集成测试期间所需的配置项，如测试数据库连接信息等。这个文件主要用于运行应用程序的测试套件。</li></ul><h2 id="动态导入-import-meta-glob" tabindex="-1">动态导入 <code>import.meta.glob()</code> <a class="header-anchor" href="#动态导入-import-meta-glob" aria-label="Permalink to &quot;动态导入 \`import.meta.glob()\`&quot;">​</a></h2><blockquote><p>这只是一个 Vite 独有的功能而不是一个 Web 或 ES 标准</p></blockquote><p>从文件系统导入多个模块</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(glob: string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string[], options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImportGlobOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">boolean, string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// example </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../foo/*.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多个匹配模式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> modules</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">meta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">glob</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;~/pages/**/*.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;!~/pages/**/*copy.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//反向匹配，(以 ! 作为前缀）。若要忽略结果中的一些文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;!~/pages/**/component&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> modules) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules[path]().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">mod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path, mod) })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="vite打包优化" tabindex="-1">vite打包优化 <a class="header-anchor" href="#vite打包优化" aria-label="Permalink to &quot;vite打包优化&quot;">​</a></h2><p><a href="https://v.douyin.com/iFYfo1r3/" target="_blank" rel="noreferrer">袁进 vite打包优化</a></p><h2 id="virtual-module" tabindex="-1">virtual module <a class="header-anchor" href="#virtual-module" aria-label="Permalink to &quot;virtual module&quot;">​</a></h2><ul><li>通常你会看到类似 <code>import &#39;library&#39;</code> 的导入语句，而不是具体的文件路径</li><li>像unocss包在使用时 <code>import &#39;uno.css&#39;</code> 这种就是使用了虚拟模块 因为虚拟模块提供了一个抽象的名称，而不是直接暴露文件路径给用户</li><li>那是怎么处理的呢 是插件在构建时动态生成的 如 webpack、Rollup、Vite 等。这些构建工具都支持虚拟模块的概念，并提供了相应的插件或配置来实现。</li><li>相关文章 <ul><li><a href="https://segmentfault.com/q/1010000043642556" target="_blank" rel="noreferrer">如何支持 import &#39;virtual:uno.css&#39;语法？</a></li></ul></li></ul><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><ul><li>vite打包后 <em>本地</em> 修改好的功能 <em>线上</em> 并没有 ，且通过sourcemap查看里面有旧文件（文件已更名，显示得还是之前的文件名）和已经更名后的新文件 <ul><li><s>vite@^5.1版本 为了更快打包构建 底层打包工具切换到了<code>RollDown</code>里面使用了缓存技术，导致</s> 不是的</li><li>后来发现是运维人员jenkins自动化部署时 把dist文件写入服务器时 未将之前文件进行<strong>先删除后写入</strong>而是将文件进行了覆盖，原有多出来的文件就一直在 因为打包出来的文件里没有这个无法覆盖</li></ul></li></ul>`,22),l=[e];function h(p,k,r,o,d,E){return a(),i("div",null,l)}const y=s(n,[["render",h]]);export{c as __pageData,y as default};
