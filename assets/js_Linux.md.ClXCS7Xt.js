import{_ as i,c as s,o as a,a4 as e}from"./chunks/framework.JknIMk6Q.js";const F=JSON.parse('{"title":"Linux","description":"","frontmatter":{},"headers":[],"relativePath":"js/Linux.md","filePath":"js/Linux.md"}'),l={name:"js/Linux.md"},t=e(`<h1 id="linux" tabindex="-1"><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noreferrer">Linux</a> <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;[Linux](https://www.runoob.com/linux/linux-command-manual.html)&quot;">​</a></h1><h2 id="shell" tabindex="-1">shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;shell&quot;">​</a></h2><ul><li><a href="https://wangdoc.com/bash/intro" target="_blank" rel="noreferrer">Bash 脚本教程-阮一峰</a></li><li><a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noreferrer">shell教程-菜鸟</a></li></ul><p>shell是<em>命令行解释器</em>是<code>Linux/Unix</code>的一个外壳也是最重要的概念，它负责外界（用户）与Linux内核的交互 <code>test.sh shell脚本文件</code></p><ul><li>bash就是shell的一种，也是 Linux下的默认shell程序。 Bash 是 Unix 系统和 Linux 系统的一种 Shell（命令行环境），是目前绝大多数 Linux 发行版的默认 Shell。</li><li>zsh 相比bash，它更强大，也更人性化，俗称终极shell。</li><li><a href="https://github.com/ohmyzsh/ohmyzsh/wiki" target="_blank" rel="noreferrer">oh my zsh</a><blockquote><p>安装oh my zsh 可能会导致nvm pnpm 等全局依赖失效 ，因为更改了PATH变量</p></blockquote><ul><li>安装 <code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></li><li>卸载 <code>uninstall_oh_my_zsh</code></li><li><code>comd+space</code>输入<code>zsh | Terminal.app</code>打开终端shell</li></ul></li></ul><h3 id="打断" tabindex="-1">打断 <a class="header-anchor" href="#打断" aria-label="Permalink to &quot;打断&quot;">​</a></h3><ul><li>set -e (全部)</li><li>command1 || exit 1 （单条）</li></ul><h3 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h3><p>多指令用<code>$</code></p><ul><li>ls - 列出文件和目录</li><li>cd - 切换目录</li><li>mkdir - 创建目录</li><li>touch - 创建文件</li><li>rm - 删除文件和目录</li><li>cp - 复制文件和目录</li><li>mv - 移动文件和目录</li><li>echo - 输出文本 或者写入文本</li><li>open /Users/amoy/Library/pnpm/store/v3 快速打开文件夹</li><li><code>which &lt;指令：node | npm |vue&gt;</code></li><li><code>ipconfig</code>是windows系统中用于查看网络配置信息的命令<a id="ifconfig"></a></li><li><code>ifconfig</code>是Linux系统中用于显示或设置网络配置信息的命令 mac也能用 因为mac Linux 都是类Unix操作系统 <ul><li><code>ifconfig | grep &quot;inet&quot; | grep -v 127.0.1</code> 查看当前网络信息</li></ul></li></ul><h3 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># demo.sh</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;我是变量值&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $name</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;脚本名：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;参数：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\${10}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\${11}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;参数个数：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;进程ID：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;显示Shell使用的当前选项，与set命令功能相同：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;后台运行的最后一个进程的ID号：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">，&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;参数列表（参数以空格分隔）：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;参数列表（每个参数引号包裹）：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;上一个命令的退出状态【0:成功，其他则不成功】：</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><p><code>sh demo.sh 1 2 3 4 5 6 7 8 9 10 11 12 &#39; 123&#39;</code></p><h3 id="linux之shell脚本-、-与" tabindex="-1"><a href="https://blog.csdn.net/feiying0canglang/article/details/106836501" target="_blank" rel="noreferrer">Linux之Shell脚本--$(())、$()与\${}</a> <a class="header-anchor" href="#linux之shell脚本-、-与" aria-label="Permalink to &quot;[Linux之Shell脚本--$(())、$()与\${}](https://blog.csdn.net/feiying0canglang/article/details/106836501)&quot;">​</a></h3><ul><li>比如 <code>cat $(pwd) &gt; aaa 等价于 cat </code>pwd<code>&gt; aaa </code></li><li><code>$()</code>：这个小括号里放的是命令，和\`\`反引号作用一样，执行这个命令</li><li><code>\${}</code>：这里面放的是变量，用来引用的</li><li><code>$( )</code>中放的是命令，相当于<code></code>，例如todaydate=$(date +%Y%m%d) 意思是执行date命令，返回执行结果给变量todaydate，也可以写为todaydate=<code>date +%Y%m%d</code>；</li><li><code>\${ }</code>中放的是变量，例如echo \${PATH}取PATH变量的值并打印，也可以不加括号比如$PATH。</li></ul><h3 id="单行写入-多行写入" tabindex="-1">单行写入 &amp; 多行写入 <a class="header-anchor" href="#单行写入-多行写入" aria-label="Permalink to &quot;单行写入 &amp; 多行写入&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -E</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HUSKY_GIT_PARAMS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./.husky/pre-commit</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 单行覆盖写入</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitlint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -E</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HUSKY_GIT_PARAMS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./.husky/pre-commit</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 单行行尾追加写入</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 多行写入  &lt;&lt;EOF 开始  EOF结束 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 覆盖 &gt;./.husky/pre-commit  行尾追加 &gt;&gt;./.husky/pre-commit</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./.husky/pre-commit</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">#!/usr/bin/env sh</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">. &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(dirname -- &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0&quot;)/_/husky.sh&quot; </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npx commitlint -E HUSKY_GIT_PARAMS</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><h3 id="example" tabindex="-1">example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example&quot;">​</a></h3><p>创建deploy.sh(部署文件) 并写入 &#39;cd docs/.vitepress/dist&#39;</p><p><code>mkdir deploy.sh &amp; echo &#39;cd docs/.vitepress/dist&#39; &gt; deploy.sh</code></p><h2 id="ssh" tabindex="-1"><a href="https://www.jb51.net/softjc/927234.html" target="_blank" rel="noreferrer">ssh</a> <a class="header-anchor" href="#ssh" aria-label="Permalink to &quot;[ssh](https://www.jb51.net/softjc/927234.html)&quot;">​</a></h2><p>SSH 是 Linux 系统的登录工具，现在广泛用于服务器登录和各种加密通信。 本教程介绍 SSH（主要是它的实现 OpenSSH）的概念和基本用法，也可以当作手册查询。</p><ul><li><a href="https://wangdoc.com/ssh/basic" target="_blank" rel="noreferrer">SSH 基本知识</a></li></ul><h2 id="vim" tabindex="-1"><a href="https://www.jb51.net/softjc/927234.html" target="_blank" rel="noreferrer">vim</a> <a class="header-anchor" href="#vim" aria-label="Permalink to &quot;[vim](https://www.jb51.net/softjc/927234.html)&quot;">​</a></h2><p><code>vim file</code>进入vim模式 <code>命令模式</code> | <code>编辑模式</code> | <code>末行模式</code></p><ul><li>命令模式下，按下<code>i</code>、<code>a</code>等键，可以计入 <strong><code>编辑模式</code></strong></li><li>命令模式下，输入<code>:</code>后，进入 <strong><code>末行模式</code></strong></li><li>非命令模式下，按下esc，可以回到命令模式 (按esc慢退、按两次esc快退、或者删除所有命令，可以回到命令模式)</li></ul><h3 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to &quot;命令模式&quot;">​</a></h3><p>移动</p><ul><li><code>jkhl</code> 上下左右 | <code>gg</code> 首行 | <code>G</code> 尾行 | <code>gm</code> 行中间 | <code>w</code> 往后一个单词 | <code>b</code> 往前一个单词</li><li><code>H</code>顶 | <code>M</code>中间 | <code>L</code>底</li><li><code>数字+G</code> 跳转指定行 | <code>数字+上下方向键</code> 上下移动几行 | <code>数字+左右方向键</code> 左右移动几个字符</li></ul><h3 id="末行模式" tabindex="-1">末行模式 <a class="header-anchor" href="#末行模式" aria-label="Permalink to &quot;末行模式&quot;">​</a></h3><ul><li><code>:w</code> 保存 | <code>:q</code> 退出 | <code>:!</code> 强制的意思(得搭配wq等指令一起)</li><li><code>x!</code> 保存文本并退出(强制) | <code>:wq</code> 保存并退出 | <code>:wq!</code> 强制保存并退出 | <code>:w!</code> 强制保存</li></ul><h2 id="brew-curl-wget" tabindex="-1"><code>brew curl wget</code> <a class="header-anchor" href="#brew-curl-wget" aria-label="Permalink to &quot;\`brew curl wget\`&quot;">​</a></h2><h3 id="brew" tabindex="-1">brew <a class="header-anchor" href="#brew" aria-label="Permalink to &quot;brew&quot;">​</a></h3><ul><li><a href="https://www.ngui.cc/el/23226.html" target="_blank" rel="noreferrer">相关文章</a></li><li>Homebrew 终端程序管理工具 能让你更快速的安装你想要的工具。而不用考虑大量的依赖。目前支持 macOS 和 linux 系统。主要有四个部分组成: brew、homebrew-core 、homebrew-cask、homebrew-bottles</li></ul><ol><li>在 mac 下安装 mongoDB 数据库时很麻烦 环境变量配置也麻烦</li><li>brew 是 MacOS 上的包管理工具，可以简化 macOS 和 Linux 操作系统上软件的安装</li><li>brew 是 ruby 开发的 所以得先确保 ruby 有安装 <ol><li>which ruby</li><li>ruby --version</li></ol></li></ol><ul><li><p>安装</p><ul><li>此操作慢 需翻墙 <s>ruby -e &quot;$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)&quot;</s></li><li>/usr/bin/ruby -e &quot;$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)&quot;</li><li>/bin/zsh -c &quot;$(curl -fsSL <a href="https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh" target="_blank" rel="noreferrer">https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh</a>)&quot;</li></ul></li><li><p>命令</p><ul><li><code>brew -v</code></li><li><code>brew ls &lt;list&gt;</code></li><li>需要赋给/usr/local 目录权限 <code>sudo chown -R 系统当前用户名 /usr/local</code></li><li>更新 <code>brew update</code></li><li>安装 npm 包管理 <code>brew install npm</code></li></ul></li></ul><h3 id="curl" tabindex="-1">curl <a class="header-anchor" href="#curl" aria-label="Permalink to &quot;curl&quot;">​</a></h3><h3 id="wget" tabindex="-1">wget <a class="header-anchor" href="#wget" aria-label="Permalink to &quot;wget&quot;">​</a></h3>`,38),h=[t];function n(o,r,p,d,c,k){return a(),s("div",null,h)}const g=i(l,[["render",n]]);export{F as __pageData,g as default};
