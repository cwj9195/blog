import{_ as e,c as l,o,a2 as a}from"./chunks/framework.BvpWiaHw.js";const b=JSON.parse('{"title":"Linux","description":"","frontmatter":{},"headers":[],"relativePath":"js/Linux.md","filePath":"js/Linux.md"}'),i={name:"js/Linux.md"},r=a('<h1 id="linux" tabindex="-1"><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noreferrer">Linux</a> <a class="header-anchor" href="#linux" aria-label="Permalink to &quot;[Linux](https://www.runoob.com/linux/linux-command-manual.html)&quot;">​</a></h1><h2 id="brew-curl-wget" tabindex="-1"><code>brew curl wget</code> <a class="header-anchor" href="#brew-curl-wget" aria-label="Permalink to &quot;`brew curl wget`&quot;">​</a></h2><h3 id="brew" tabindex="-1">brew <a class="header-anchor" href="#brew" aria-label="Permalink to &quot;brew&quot;">​</a></h3><ul><li><a href="https://www.ngui.cc/el/23226.html" target="_blank" rel="noreferrer">相关文章</a></li><li>Homebrew 终端程序管理工具 能让你更快速的安装你想要的工具。而不用考虑大量的依赖。目前支持 macOS 和 linux 系统。主要有四个部分组成: brew、homebrew-core 、homebrew-cask、homebrew-bottles</li></ul><ol><li>在 mac 下安装 mongoDB 数据库时很麻烦 环境变量配置也麻烦</li><li>brew 是 MacOS 上的包管理工具，可以简化 macOS 和 Linux 操作系统上软件的安装</li><li>brew 是 ruby 开发的 所以得先确保 ruby 有安装 <ol><li>which ruby</li><li>ruby --version</li></ol></li></ol><ul><li><p>安装</p><ul><li>此操作慢 需翻墙 <s>ruby -e &quot;$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)&quot;</s></li><li>/usr/bin/ruby -e &quot;$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install" target="_blank" rel="noreferrer">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)&quot;</li><li>/bin/zsh -c &quot;$(curl -fsSL <a href="https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh" target="_blank" rel="noreferrer">https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh</a>)&quot;</li></ul></li><li><p>命令</p><ul><li><code>brew -v</code></li><li><code>brew ls &lt;list&gt;</code></li><li>需要赋给/usr/local 目录权限 <code>sudo chown -R 系统当前用户名 /usr/local</code></li><li>更新 <code>brew update</code></li><li>安装 npm 包管理 <code>brew install npm</code></li></ul></li></ul><h3 id="curl" tabindex="-1">curl <a class="header-anchor" href="#curl" aria-label="Permalink to &quot;curl&quot;">​</a></h3><h3 id="wget" tabindex="-1">wget <a class="header-anchor" href="#wget" aria-label="Permalink to &quot;wget&quot;">​</a></h3><h2 id="shell" tabindex="-1">shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;shell&quot;">​</a></h2><p>shell是<em>命令行解释器</em>是<code>Linux/Unix</code>的一个外壳也是最重要的概念，它负责外界（用户）与Linux内核的交互 <code>test.sh shell脚本文件</code></p><ul><li><p>bash就是shell的一种，也是 Linux下的默认shell程序</p></li><li><p>zsh 相比bash，它更强大，也更人性化，俗称终极shell。 <code>comd+space</code>输入<code>zsh | Terminal.app</code>打开终端shell 多指令用<code>$</code></p></li><li><p>ls - 列出文件和目录</p></li><li><p>cd - 切换目录</p></li><li><p>mkdir - 创建目录</p></li><li><p>touch - 创建文件</p></li><li><p>rm - 删除文件和目录</p></li><li><p>cp - 复制文件和目录</p></li><li><p>mv - 移动文件和目录</p></li><li><p>echo - 输出文本 或者写入文本</p></li><li><p>open /Users/amoy/Library/pnpm/store/v3 快速打开文件夹</p></li><li><p><code>which &lt;指令：node | npm |vue&gt;</code></p></li><li><p><code>ipconfig</code>是windows系统中用于查看网络配置信息的命令<a id="ifconfig"></a></p></li><li><p><code>ifconfig</code>是Linux系统中用于显示或设置网络配置信息的命令 mac也能用 因为mac Linux 都是类Unix操作系统</p><ul><li><code>ifconfig | grep &quot;inet&quot; | grep -v 127.0.1</code> 查看当前网络信息</li></ul></li></ul><h3 id="example" tabindex="-1">example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;example&quot;">​</a></h3><p>创建deploy.sh(部署文件) 并写入 &#39;cd docs/.vitepress/dist&#39;</p><p><code>mkdir deploy.sh &amp; echo &#39;cd docs/.vitepress/dist&#39; &gt; deploy.sh</code></p><h2 id="vim" tabindex="-1"><a href="https://www.jb51.net/softjc/927234.html" target="_blank" rel="noreferrer">vim</a> <a class="header-anchor" href="#vim" aria-label="Permalink to &quot;[vim](https://www.jb51.net/softjc/927234.html)&quot;">​</a></h2><p><code>vim file</code>进入vim模式 <code>命令模式</code> | <code>编辑模式</code> | <code>末行模式</code></p><ul><li>命令模式下，按下<code>i</code>、<code>a</code>等键，可以计入 <strong><code>编辑模式</code></strong></li><li>命令模式下，输入<code>:</code>后，进入 <strong><code>末行模式</code></strong></li><li>非命令模式下，按下esc，可以回到命令模式 (按esc慢退、按两次esc快退、或者删除所有命令，可以回到命令模式)</li></ul><h3 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to &quot;命令模式&quot;">​</a></h3><ul><li>移动 <code>jkhl</code> 上下左右 | <code>gg</code> 首行 | <code>G</code> 尾行 | <code>gm</code> 行中间 | <code>w</code> 往后一个单词 | <code>b</code> 往前一个单词 <code>H</code>顶 | <code>M</code>中间 | <code>L</code>底 <code>数字+G</code> 跳转指定行 | <code>数字+上下方向键</code> 上下移动几行 | <code>数字+左右方向键</code> 左右移动几个字符</li></ul><h3 id="末行模式" tabindex="-1">末行模式 <a class="header-anchor" href="#末行模式" aria-label="Permalink to &quot;末行模式&quot;">​</a></h3><p><code>:w</code> 保存 | <code>:q</code> 退出 | <code>:!</code> 强制的意思(得搭配wq等指令一起) <code>x!</code> 保存文本并退出(强制) | <code>:wq</code> 保存并退出 | <code>:wq!</code> 强制保存并退出 | <code>:w!</code> 强制保存</p>',21),c=[r];function t(d,s,n,h,u,p){return o(),l("div",null,c)}const w=e(i,[["render",t]]);export{b as __pageData,w as default};
