import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.JknIMk6Q.js";const E=JSON.parse('{"title":"node包管理器","description":"","frontmatter":{},"headers":[],"relativePath":"js/node包管理器.md","filePath":"js/node包管理器.md"}'),l={name:"js/node包管理器.md"},n=e(`<h1 id="node包管理器" tabindex="-1">node包管理器 <a class="header-anchor" href="#node包管理器" aria-label="Permalink to &quot;node包管理器&quot;">​</a></h1><ul><li><a href="https://zhuanlan.zhihu.com/p/659824566" target="_blank" rel="noreferrer">pnpm&gt;yarn&gt;npm 优劣对比</a></li><li><a href="https://www.jianshu.com/p/c427ed4c45e1" target="_blank" rel="noreferrer">npm pnpm yarn</a></li></ul><h2 id="npmrc文件" tabindex="-1"><code>.npmrc</code>文件 <a class="header-anchor" href="#npmrc文件" aria-label="Permalink to &quot;\`.npmrc\`文件&quot;">​</a></h2><p><a href="https://www.jianshu.com/p/0cda4343d704" target="_blank" rel="noreferrer">关于项目中 .npmrc文件</a></p><ul><li>开发中用于配置npm（Node Package Manager）行为的重要文件。它允许开发者自定义npm的各种设置，包括镜像源、代理、认证信息、依赖管理等等</li><li>从<code>npm | yarn</code>项目迁移到<code>pnpm</code>时 可能会存在 <strong>对等依赖缺失（peer dep）</strong> 可以在根目录创建<a href="https://pnpm.io/zh/npmrc" target="_blank" rel="noreferrer">.npmrc文件</a></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">#.npmrc文件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">shamefully</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hoist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #会将所有peer dependencies安装到顶层的node_modules文件夹中。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">auto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">install</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">peers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> #自动安装任何缺少的非可选同级依赖关系。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">peer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  #如果启用了此选项，那么在依赖树中存在缺失或无效的 peer 依赖关系时，命令将执行失败</span></span></code></pre></div><h2 id="package-json" tabindex="-1"><a href="https://pnpm.io/zh/package_json" target="_blank" rel="noreferrer">package.json</a> <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;[package.json](https://pnpm.io/zh/package_json)&quot;">​</a></h2><h3 id="script" tabindex="-1"><a href="https://docs.npmjs.com/cli/v10/using-npm/scripts" target="_blank" rel="noreferrer">script</a> <a class="header-anchor" href="#script" aria-label="Permalink to &quot;[script](https://docs.npmjs.com/cli/v10/using-npm/scripts)&quot;">​</a></h3><ul><li><code>pre</code> &amp; <code>post</code><ul><li>pre &amp; post 脚本的前后生命周期脚本，执行到某一脚本如果匹配到名称的前置和后置命令也会运行</li></ul></li><li><code>prepare</code> 、 <code>prepublish</code> , <code>prepublishOnly</code> , <code>prepack</code> , <code>postpack</code> , <code>dependencies</code><blockquote><p>有一些特殊的生命周期脚本只在某些情况下发生。这些脚本是在 <code>pre&lt;event&gt; 、 post&lt;event&gt; 和 &lt;event&gt;</code> 脚本之外发生的。</p></blockquote><ul><li><code id="package.json:prepare">prepare</code><ul><li>在包装之前运行，即 npm publish 和 npm pack</li><li>在本地 npm install 上运行，不带任何参数</li><li>运行在 prepublish 之后， prepublishOnly之前</li></ul></li></ul></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;packageManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pnpm@8.10.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//包管理器</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // pre &amp; post 脚本的前后生命周期脚本，执行到某一脚本如果匹配到名称的前置和后置命令也会运行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;precompress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ executes BEFORE the \`compress\` script }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;compress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ run command to compress files }}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;postcompress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{{ executes AFTER \`compress\` script }}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;dependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.21.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;~3.21.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表示安装3.21.X的最新版本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;axios&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;^3.21.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表示安装3.X.X的最新版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 引擎</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;engines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;node&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;= 6.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;npm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;= 3.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;pnpm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&gt;=3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://segmentfault.com/a/1190000008832423" target="_blank" rel="noreferrer">npm scripts 官方文档（译）</a></p><h2 id="nvm、npm、nrm、yarn、npx、pnpm-相关解释" tabindex="-1"><a href="https://baijiahao.baidu.com/s?id=1726423980119026076&amp;wfr=spider&amp;for=pc" target="_blank" rel="noreferrer">nvm、npm、nrm、yarn、npx、pnpm 相关解释</a> <a class="header-anchor" href="#nvm、npm、nrm、yarn、npx、pnpm-相关解释" aria-label="Permalink to &quot;[nvm、npm、nrm、yarn、npx、pnpm 相关解释](https://baijiahao.baidu.com/s?id=1726423980119026076&amp;wfr=spider&amp;for=pc)&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nvm：node.js 版本管理工具；不同项目可能需要不同版本的 node；可以使用 nvm 来管理 node.js 版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npx：一个 npm 包执行器。我们可以使用 npx 来执行各种命令。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nrm：npm 源的管理工具，可以用来方便的切换 npm 源</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm：node.js 包管理工具；用来管理 node.js 中的第三方插件；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cnpm：使用的是淘宝的源。用法跟 npm 完全一致。cnpm 经常会有问题，所以在很多地方不推荐使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">yarn：运行速度显著提升，整个安装时间比 npm 少。一般推荐使用 yarn 代替 npm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pnpm：</span></span></code></pre></div><h2 id="npx" tabindex="-1">npx <a class="header-anchor" href="#npx" aria-label="Permalink to &quot;npx&quot;">​</a></h2><p>一个npm包执行器，指在提高从npm注册表使用软件包时的体验</p><p>使用NPX，您可以运行和执行软件包，而无需在本地或全局安装它们。</p><p><code>npx http-server dist</code> <s>npm i -g http-server &amp; http-server dist</s></p><p><code>npx @vue/cli create helloWord</code> <s>npm i -g @vue/cli &amp; vue create helloWord</s></p><h3 id="使用npx代替nvm-切换node版本" tabindex="-1">使用npx代替nvm 切换node版本 <a class="header-anchor" href="#使用npx代替nvm-切换node版本" aria-label="Permalink to &quot;使用npx代替nvm 切换node版本&quot;">​</a></h3><p><code>npx -p node@10.0.0 npm install</code> //指定node版本来安装项目依赖</p><p><code>npx -p node@7 -- node -v </code></p><h2 id="nvm" tabindex="-1">nvm <a class="header-anchor" href="#nvm" aria-label="Permalink to &quot;nvm&quot;">​</a></h2><ul><li><a href="https://blog.csdn.net/m0_51340928/article/details/131878565" target="_blank" rel="noreferrer">Mac安装nvm管理node和npm依赖（M1芯片）</a></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>在实际的前端开发过程中，可能会经常遇见 node.js 的版本问题，不同的项目需要使用不同的 node.js 版本。</span></span>
<span class="line"><span>直接安装的话，只能安装和使用 node.js 的一个版本。可以使用 nvm 来安装和管理不同版本的 node.js。</span></span>
<span class="line"><span>nvm 是  node.js 管理工具。可以通过 nvm 安装和切换不同版本的 node.js。</span></span>
<span class="line"><span>如果有安装过node，最好进行卸载，因为自己安装的，nvm控制不了，会出现一些意想不到的报错，先安装nvm，再使用nvm命令安装需要的版本即可！</span></span></code></pre></div><ul><li><p>安装 <code>curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.38.0/install.sh | bash</code></p></li><li><p>安装 <code>wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.38.0/install.sh | bash</code></p></li><li><p>常用命令</p><ul><li><code>nvm ls</code> ：列出所有已安装的 node 版本</li><li><code>nvm list</code> ：列出所有已安装的 node 版本</li><li><code>nvm install &lt; 16 | 18 | 20 &gt;</code> ：安装对应版本</li><li><code>nvm list available</code> ：显示所有可下载的版本</li><li><code>nvm install latest</code>：安装最新版 node</li><li><code>nvm install [node 版本号]</code> ：安装指定版本 node</li><li><code>nvm uninstall [node 版本号]</code> ：删除已安装的指定版本</li><li><code>nvm use [node 版本号]</code> ：切换到指定版本 node</li><li><code>nvm current</code> ：当前 node 版本</li><li><code>nvm unalias [别名]</code> ：删除已定义的别名</li></ul></li></ul><h2 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h2><p><code>npm config set registry &lt;https://registry.npm.taobao.org&gt;</code></p><p>更改 npm 的下载镜像为淘宝镜像</p><p><code>npm config set registry &lt;https://registry.npmjs.org&gt;</code></p><p>安装 cnpm 淘宝镜像</p><p><code>npm install -g cnpm --registry=&lt;https://registry.npm.taobao.org&gt;</code></p><ul><li><p><code>npm install &lt; -g || -S || -D || 空&gt;</code></p><ul><li><code>-g</code> 全局安装</li><li><code>-S</code> 就是--save 的简写 注入到 package.json 的 dependencies(依赖)对象 生产环境</li><li><code>-D</code> 就是--save-dev 注入到 package.json 的 devDependencies(开发依赖)对象 开发环境</li><li>\`\` 啥也不写 npm i module 包名不会注入到 package.json（别人会不知道依赖啥） <ul><li>好像最新规则是不写也默认 -S 注入依赖</li></ul></li></ul></li><li><p><code>npm uni packageName</code></p></li><li><p><code>npm list -g --depth 0</code></p><ul><li><code>npm list --depth= &lt; 0 || 1 || 2 || ... &gt; &lt; --global &gt;</code></li><li>显示 出我们的项目中安装了哪些模块，</li><li>其实就是 package.json 文件中 的 dependencies 和 devDependencies 的和</li></ul></li><li><p>npm cache clean --force 清除缓存</p></li></ul><h2 id="pnpm" tabindex="-1"><a href="https://pnpm.io/zh/" target="_blank" rel="noreferrer">pnpm</a> <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;[pnpm](https://pnpm.io/zh/)&quot;">​</a></h2><p><a href="https://blog.csdn.net/bobo789456123/article/details/132882778" target="_blank" rel="noreferrer">pnpm实战教程</a></p><ul><li><a href="https://pnpm.io/zh/cli/env" target="_blank" rel="noreferrer">pnpm env <code>&lt;cmd&gt;</code></a> 管理Node.js环境 跟<code>nvm</code>功能一样</li><li><code>pnpm add --save-peer vue</code> 安装到 peerDependencies 对等依赖（宿主依赖）</li><li><code>npx</code> | <code>pnpx</code> | <code>pnpm dlx</code> | <code>pnpm exec</code><ul><li><code>pnpx</code> = <code>pnpm dlx</code> = <code>npx</code><ul><li>大多数情况下通用，表现一致</li></ul></li><li><code>pnpm exec</code>，它不下载包，只运行node_modules/.bin中已经存在的包</li><li><a href="https://www.5axxw.com/questions/content/mlm73z" target="_blank" rel="noreferrer">pnpm创建、pnpx和dlx之间的区别是什么？</a></li></ul></li></ul><h2 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h2><ul><li><code>sudo npm i -g yarn</code></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (npm i)         </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        yarn</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install xxx             </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        yarn add xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm uninstall xxx           </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        yarn remove xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install xxx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        yarn add xxx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dev</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm install xxx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        yarn global add xxx</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm update                  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        yarn upgrade</span></span></code></pre></div><h2 id="chrome插件" tabindex="-1">chrome插件 <a class="header-anchor" href="#chrome插件" aria-label="Permalink to &quot;chrome插件&quot;">​</a></h2><ul><li><code>Console Import</code><ul><li>浏览器里可以直接调试各种包 安装浏览器插件<code>Console Import</code> 可以在控制台直接<code>$i([packageName])</code>导入包 就可以直接在控制台调试<code>$i(&#39;dayjs&#39;)</code></li></ul></li></ul><h2 id="工具网站" tabindex="-1">工具网站 <a class="header-anchor" href="#工具网站" aria-label="Permalink to &quot;工具网站&quot;">​</a></h2><ul><li><p><code>Unicode Emoji</code> 表情符号🎉</p><ul><li><a href="https://www.emojiall.com/zh-hans" target="_blank" rel="noreferrer">Unicode块: 😀 表情符号 | EmojiAll</a></li><li><a href="https://www.emojiall.com/zh-hant" target="_blank" rel="noreferrer">🔢 Unicode版本列表 | EmojiAll 繁体</a></li><li><a href="https://www.w3school.com.cn/charsets/ref_emoji.asp" target="_blank" rel="noreferrer">Emoji Unicode 参考手册</a></li><li><a href="https://blog.csdn.net/qq_36380426/article/details/108016275" target="_blank" rel="noreferrer">【拓展】谈谈字符编码：Unicode编码与emoji表情编码</a></li></ul></li><li><p><a href="https://www.bootschool.net/ascii" id="ascii" target="_blank" rel="noreferrer">英文转ASCII艺术字</a></p></li><li><p><a href="https://npm.devtool.tech/" target="_blank" rel="noreferrer">npm.devtool.tech</a></p><ul><li>最直观的查看流行的 npm 包</li><li><strong>可以在控制台直接调用调试某个npm包</strong></li><li>上传 package.json 查看该项目的技术栈，你可以层层递进点进去，了解各个依赖 package 的用途</li></ul></li><li><p><a href="https://www.zhihu.com/question/20241338" target="_blank" rel="noreferrer">前端工程师都有用哪些比较靠谱的小工具？</a></p></li><li><p><a href="https://caniuse.com/" target="_blank" rel="noreferrer">https://caniuse.com/</a></p></li><li><p>在线开发工具IDE</p><ul><li><a href="https://stackblitz.com/" target="_blank" rel="noreferrer">stackblitz - webContainer</a><ul><li>除了支持前端项目外，还支持在浏览器中运行 <code>Node.js</code> 环境；</li></ul></li><li><a href="https://codepen.io/" target="_blank" rel="noreferrer">CodePen</a></li><li><a href="https://codesandbox.io/" target="_blank" rel="noreferrer">CodeSandBox</a></li><li><a href="https://jsfiddle.net/" target="_blank" rel="noreferrer">JSFiddle</a><ul><li>JsFiddle 非常受欢迎。 它也是在 StackOverflow 上展示解决方案最常用的 IDE。</li></ul></li><li><a href="https://playcode.io/" target="_blank" rel="noreferrer">playcode</a></li><li><a href="https://jsbin.com/" target="_blank" rel="noreferrer">JsBin</a></li><li><a href="https://code.juejin.cn/" target="_blank" rel="noreferrer">码上掘金</a></li></ul></li><li><p><a href="https://json2ts.com/" target="_blank" rel="noreferrer">图片压缩</a></p></li></ul><h2 id="npm包-新技术" tabindex="-1">npm包 &amp; 新技术 <a class="header-anchor" href="#npm包-新技术" aria-label="Permalink to &quot;npm包 &amp; 新技术&quot;">​</a></h2><ul><li><p>virtual module</p><ul><li>通常你会看到类似 <code>import &#39;library&#39;</code> 的导入语句，而不是具体的文件路径</li><li>像unocss包在使用时 <code>import &#39;uno.css&#39;</code> 这种就是使用了虚拟模块 因为虚拟模块提供了一个抽象的名称，而不是直接暴露文件路径给用户</li><li>那是怎么处理的呢 是插件在构建时动态生成的 如 webpack、Rollup、Vite 等。这些构建工具都支持虚拟模块的概念，并提供了相应的插件或配置来实现。</li><li>相关文章 <ul><li><a href="https://segmentfault.com/q/1010000043642556" target="_blank" rel="noreferrer">如何支持 import &#39;virtual:uno.css&#39;语法？</a></li></ul></li></ul></li><li><p><a href="https://unjs.io/" target="_blank" rel="noreferrer">Unjs</a> 工具包集合</p><ul><li><a href="https://nitro.unjs.io/" target="_blank" rel="noreferrer">nitro</a> 创建具有所有必要功能的 Web 服务器并将其部署在您喜欢的任何地方。</li></ul></li><li><p><a href="https://nuxt.com/" target="_blank" rel="noreferrer">nuxt</a> 服务端渲染框架</p></li><li><p><code>dom镜像 传送门</code></p><ul><li>vue2 <a href="https://www.jianshu.com/p/25fa8bebac9d" target="_blank" rel="noreferrer"><code>portal-vue</code></a></li><li>vue3 <a href="https://cn.vuejs.org/guide/built-ins/teleport.html#teleport" target="_blank" rel="noreferrer"><code>&lt;Teleport /&gt;</code></a></li><li><a href="https://blog.csdn.net/weixin_49668076/article/details/132217311" target="_blank" rel="noreferrer">【vue2】Vue Portal 和【vue3】Teleport</a></li></ul></li><li><p><code>http-server</code></p></li><li><p><code>PageSpy</code></p><ul><li><a href="https://mp.weixin.qq.com/s/Vcm4m5HQ7P6lc0q0nIlYfg" target="_blank" rel="noreferrer">web远程调试 PageSpy 由货拉拉大前端开源的一款用于调试H5 或者远程web项目的工具</a></li></ul></li><li><p><code>changelogen</code></p><ul><li><a href="https://cloud.tencent.com/developer/article/1755709" target="_blank" rel="noreferrer">【Git】：Commit规范 + CHANGELOG生成</a></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bump:patch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changelogen --bump --output CHANGELOG.md --release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bump:minor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changelogen --bump --output CHANGELOG.md --release --minor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bump:major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;changelogen --bump --output CHANGELOG.md --release --major&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div></li><li><p><code>npm-run-all</code></p><ul><li>它允许你并行或串行地运行多个npm脚本 这个包提供三个命令，分别是 <code>npm-run-all</code> <code>run-s</code> <code>run-p</code>，其中后两个都是 npm-run-all 带参数的简写，分别对应串行和并行。</li><li><a href="https://blog.csdn.net/gitblog_00080/article/details/136867473" target="_blank" rel="noreferrer">推荐项目：npm-run-all - 高效管理Node.js脚本工具</a></li><li><a href="https://juejin.cn/post/6854573216363446286" target="_blank" rel="noreferrer">npm-run-all 简化script配置</a></li></ul></li><li><p><code>vercel</code> + <code>nitropack</code></p><ul><li><a href="https://www.cnblogs.com/echolun/p/17524216.html" target="_blank" rel="noreferrer">快速上手 vercel，手把手教你白嫖部署上线你的个人项目</a></li><li><a href="https://www.kiwimore.com/nitropack-guide/" target="_blank" rel="noreferrer">NitroPack教程：如何使用新手友好型缓存插件提升网站速度？</a></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clear:vercel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rm -rf ./vercel.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build:vercel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;run-s clear:vercel build:nitro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build:nitro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mist build nitro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;start:nirto&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;node .output/server/index.mjs&quot;</span></span></code></pre></div></li><li><p><code>husky</code> + <code>lint-staged</code> + <code>Eslint</code> + <code>commitlint</code></p><ul><li><a href="./git.html#gitHook"><b style="color:red;">跳转 gitHook 介绍</b></a></li></ul></li><li><p><code>esno</code></p><ul><li>和 <code>ts-node</code> 一样 可以直接执行 ts 文件 <ul><li><code>node demo.js</code> -&gt; <code>esno demo.ts</code></li></ul></li><li><a href="https://blog.csdn.net/u012384510/article/details/122974932" target="_blank" rel="noreferrer">又一个基于 Esbuild 的神器！esno</a></li><li><a href="https://juejin.cn/post/7151307918715912228" target="_blank" rel="noreferrer">esno &amp; tsx 原理初探</a></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dir-tree&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esno ./scripts/dir-tree&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gen:uno&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esno ./scripts/gen-unocss&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;toJS&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;esno scripts/to-js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span></code></pre></div></li><li id="终端格式化"><p><code>picocolors</code> | <code>Chalk</code> | <code>consola</code></p><ul><li><code>picocolors</code> 和 <code>Chalk</code> 一样，picocolors 也是一个终端文本着色库。它自称是 &quot;用 ANSI 颜色进行终端输出格式化的最小、最快的库&quot;。</li><li><a href="https://www.jianshu.com/p/edd3d191bb64" target="_blank" rel="noreferrer">控制台打印佛祖</a></li><li><a href="https://www.bootschool.net/ascii" target="_blank" rel="noreferrer">英文转ASCII艺术字</a></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>    ██████████               ██     ██ ██</span></span>
<span class="line"><span>  ░░░░░██░░░               ░██    ░██░██</span></span>
<span class="line"><span>      ░██      █████       ░██    ░██░██</span></span>
<span class="line"><span>      ░██     ██░░░██ █████░██    ░██░██</span></span>
<span class="line"><span>      ░██    ░██  ░░ ░░░░░ ░██    ░██░██</span></span>
<span class="line"><span>      ░██    ░██   ██      ░██    ░██░██</span></span>
<span class="line"><span>      ░██    ░░█████       ░░███████ ░██</span></span>
<span class="line"><span>      ░░      ░░░░░         ░░░░░░░  ░░ </span></span>
<span class="line"><span>  _________  ________                ___  ___  ___     </span></span>
<span class="line"><span>  |\\___   ___\\\\   ____\\              |\\  \\|\\  \\|\\  \\    </span></span>
<span class="line"><span>  \\|___ \\  \\_\\ \\  \\___|  ____________\\ \\  \\\\\\  \\ \\  \\   </span></span>
<span class="line"><span>      \\ \\  \\ \\ \\  \\    |\\____________\\ \\  \\\\\\  \\ \\  \\  </span></span>
<span class="line"><span>        \\ \\  \\ \\ \\  \\___\\|____________|\\ \\  \\\\\\  \\ \\  \\ </span></span>
<span class="line"><span>        \\ \\__\\ \\ \\_______\\             \\ \\_______\\ \\__\\</span></span>
<span class="line"><span>          \\|__|  \\|_______|              \\|_______|\\|__|</span></span></code></pre></div></li><li><p><code>rollup-plugin-visualizer</code></p><ul><li>打包体积分析插件rollup-plugin-visualizer视图分析</li><li><a href="https://zhuanlan.zhihu.com/p/660064289?utm_id=0" target="_blank" rel="noreferrer">记一次vite 打包优化及插件使用</a></li></ul></li><li><p><code>unplugin-vue-components/vite</code> + <code>antdv-component-resolver</code></p><ul><li>组件按需引入</li></ul></li><li><p><code>depcheck</code></p><ul><li><a href="https://blog.csdn.net/black_cat7/article/details/133854985" target="_blank" rel="noreferrer">depcheck检查项目依赖的安装情况-帮你解决各种项目运行灵异事件</a></li></ul></li><li><p><code>JSDoc</code></p><ul><li><a href="https://jsdoc.bootcss.com/" target="_blank" rel="noreferrer">JSDoc</a></li></ul></li><li><p><code>jsdom</code> | <code>happy-dom</code></p><ul><li><a href="https://jianshu.com/p/edce5473bbc3" target="_blank" rel="noreferrer">JSDOM 介绍</a></li><li>在node环境中模拟浏览器 , JSDOM 将浏览器 API 引入 Node.js</li></ul></li><li><p><code>vitest</code> | <code>jest</code></p><ul><li><a href="https://cn.vitest.dev/" target="_blank" rel="noreferrer">vitest</a></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>常用的测试方案大致分为有 4 种：</span></span>
<span class="line"><span>  端对端测试：利用一个很像用户行为的机器人来和 App 交互，并验证功能是否正常。有时也会说 “功能测试” 或 E2E。</span></span>
<span class="line"><span>  集成测试：验证多个单元是否能协调共同工作。</span></span>
<span class="line"><span>  单元测试：验证单独隔离的部分是否正常工作。</span></span>
<span class="line"><span>  静态测试：捕获写代码时的错别字和类型错误</span></span></code></pre></div></li><li><p><code>treeify</code></p><ul><li>将扁平数组转成树型结构 arr to tree</li></ul></li><li><p><code>directory-tree</code></p><ul><li><a href="https://npm.devtool.tech/directory-tree" target="_blank" rel="noreferrer">创建一个表示目录树的 JavaScript 对象。</a></li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">photos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── summer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│   └── june</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│       └── windsurf.jpg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└── winter</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    └── january</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ├── ski.png</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        └── snowboard.jpg</span></span></code></pre></div></li><li><p><code>fs-extra</code></p><ul><li><a href="https://www.bilibili.com/read/cv25095453/" target="_blank" rel="noreferrer">替代 Node.js 内置 fs 模块，更安全、更强大的文件操作库</a></li></ul></li><li><p><code>execa</code> <code>shelljs</code> <code>listr</code></p><ul><li>命令行操作</li></ul></li><li><p>终端相关 开发脚手架</p><ul><li>如何解析命令行输入？ <ul><li><code>process.argv</code></li><li><code>minimist</code> - 命令行参数解析引擎</li><li><code>arg</code> - 简单的参数解析</li><li><code>nopt</code> - Node/npm 参数解析</li></ul></li><li>如何让用户能与命令行进行交互 <ul><li><code>Inquirer.js</code> - 通用可交互命令行工具集合。</li><li><code>prompts</code> - 轻量、美观、用户友好的交互式命令行提示。</li><li><code>Enquirer</code> - 用户友好、直观且易于创建的时尚CLI提示。</li></ul></li><li>如何在命令行中显示进度条？ <ul><li><code>progress</code> - Node.js的灵活ascii进度条。</li><li><code>progress-estimator</code> - 记录进度条并估计完成承诺所需的时间。</li></ul></li><li>如何在命令行执行多任务？ <ul><li><code>listr</code> - 命令行任务列表。</li></ul></li><li>如何给命令行“锦上添花”？ <ul><li><code>chalk</code> - 命令行字符串样式美化工具。</li><li><code>ora</code> - 优雅的命令行loading效果。</li><li><code>colors.js</code> - 获取Node.js控制台的颜色。</li><li><code>qrcode-terminal</code> - 命令行中显示二维码。</li><li><code>treeify</code> - 将javascript对象漂亮地打印为树。</li><li><code>kleur</code> - 最快的Node.js库，使用ANSI颜色格式化命令行文本。</li></ul></li></ul></li><li><p>解析工具</p><ul><li>如何解析markdown？ <ul><li><code>marked</code> - Markdown解析器和编译器，专为提高速度而设计。</li><li><code>remark</code> - Markdown处理工具。</li><li><code>markdown-it</code> -支持100%通用Markdown标签解析的扩展&amp;语法插件。</li></ul></li><li>如何解析csv？ <ul><li><code>PapaParse</code> - 快速而强大的 CSV（分隔文本）解析器，可以优雅地处理大文件和格式错误的输入。</li><li><code>node-csv</code> - 具有简单api的全功能CSV解析器，并针对大型数据集进行了测试。</li><li><code>csv-parser</code> -旨在比其他任何人都快的流式CSV解析器。</li></ul></li><li>如何解析xml？ <ul><li><code>xml2js</code> - 将XML转换为JavaScript对象的转换器。</li><li><code>fast-xml-parser</code> - 具验证&amp;解析 XML。</li></ul></li></ul></li></ul>`,44),p=[n];function t(r,o,h,d,c,k){return a(),i("div",null,p)}const g=s(l,[["render",t]]);export{E as __pageData,g as default};
