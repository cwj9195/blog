import{_ as e,c as t,o as n,a4 as a,m as s,a as i}from"./chunks/framework.JknIMk6Q.js";const l="/blog/assets/05231433.DRWBk8oT.png",o="/blog/assets/05231435.C93F0Pr1.png",q=JSON.parse('{"title":"vscode","description":"","frontmatter":{},"headers":[],"relativePath":"js/vscode.md","filePath":"js/vscode.md"}'),p={name:"js/vscode.md"},h=a(`<h1 id="vscode" tabindex="-1"><a href="https://code.visualstudio.com/docs/languages/jsconfig" target="_blank" rel="noreferrer">vscode</a> <a class="header-anchor" href="#vscode" aria-label="Permalink to &quot;[vscode](https://code.visualstudio.com/docs/languages/jsconfig)&quot;">​</a></h1><ul><li><p>编译器 api ：<a href="https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API" target="_blank" rel="noreferrer">https://github.com/Microsoft/TypeScript/wiki/Using-the-Compiler-API</a></p></li><li><p>service api -：<a href="https://github.com/Microsoft/TypeScript/wiki/Using-the-Language-Service-API" target="_blank" rel="noreferrer">https://github.com/Microsoft/TypeScript/wiki/Using-the-Language-Service-API</a></p></li><li><p>开发环境搭建 -：<a href="https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin" target="_blank" rel="noreferrer">https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin</a></p></li><li><p><a href="https://code.visualstudio.com/updates/v1_66" target="_blank" rel="noreferrer">VSCode-历史版本</a></p></li></ul><h2 id="vscode文件夹" tabindex="-1"><a href="https://zhuanlan.zhihu.com/p/642777341?utm_id=0" target="_blank" rel="noreferrer">.vscode文件夹</a> <a class="header-anchor" href="#vscode文件夹" aria-label="Permalink to &quot;[.vscode文件夹](https://zhuanlan.zhihu.com/p/642777341?utm_id=0)&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├─ .vscode </span></span>
<span class="line"><span>│  ├─ extensions.json </span></span>
<span class="line"><span>│  ├─ setting.json</span></span>
<span class="line"><span>│  ├─ launch.json</span></span>
<span class="line"><span>│  ├─ task.json</span></span>
<span class="line"><span>├─ jsconfig.json</span></span>
<span class="line"><span>├─ tsconfig.json</span></span></code></pre></div><h3 id="extensions-json" tabindex="-1"><code>extensions.json</code> <a class="header-anchor" href="#extensions-json" aria-label="Permalink to &quot;\`extensions.json\`&quot;">​</a></h3><ul><li>这个文件用于记录项目所依赖的扩展插件。当共享项目时，其他人可以根据这个文件安装所需的插件，以便与大家的开发环境保持一致。</li></ul><h3 id="setting-json" tabindex="-1"><code>setting.json</code> <a class="header-anchor" href="#setting-json" aria-label="Permalink to &quot;\`setting.json\`&quot;">​</a></h3><ul><li>这个文件包含了项目的设置选项。可以在这里进行各种配置，如设置代码风格、启用或禁用扩展插件、定义编辑器的行为等。这些设置会覆盖全局设置，只对当前项目有效。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;eslint.experimental.useFlatConfig&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//eslint@^8新特性 采用flat配置文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 关闭vue2插件vetur</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;vetur.validation.template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;vetur.validation.script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;vetur.validation.style&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 着色括号</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.guides.bracketPairs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.bracketPairColorization.independentColorPoolPerBracketType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;editor.guides.bracketPairsHorizontal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="launch-json" tabindex="-1"><code>launch.json</code> <a class="header-anchor" href="#launch-json" aria-label="Permalink to &quot;\`launch.json\`&quot;">​</a></h3><ul><li>这个文件用于配置调试器。可以在这里设置调试选项，如指定调试目标（例如 Node.js、Python 等），设置启动参数、环境变量等。它定义了如何启动和调试Visual Studio Code项目。</li></ul><h3 id="task-json" tabindex="-1"><code>task.json</code> <a class="header-anchor" href="#task-json" aria-label="Permalink to &quot;\`task.json\`&quot;">​</a></h3><ul><li>这个文件用于定义和配置任务（Tasks）。任务是在 VS Code 中执行的命令或脚本，可以自动化一些常见的工作流程，如编译代码、运行测试、构建项目等。可以在这里定义自定义任务，并通过快捷键或命令面板执行它们。</li></ul><h2 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h2><h3 id="vscode-项目里导入的依赖路径带别名无法跳转问题" tabindex="-1">vscode-项目里导入的依赖路径带别名无法跳转问题 <a id="2303291451"></a> <a class="header-anchor" href="#vscode-项目里导入的依赖路径带别名无法跳转问题" aria-label="Permalink to &quot;vscode-项目里导入的依赖路径带别名无法跳转问题 &lt;a id=&quot;2303291451&quot; /&gt;&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jsconfig.json | tsconfig.json  这个给vscode编译提供上下文配置的（智能感知 IntelliSense）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;paths&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;@/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>像<code>.css | .vue</code>这种还是无法跳转的 可以借助<code>别名路径跳转</code>插件来尝试解决</p><h3 id="vscode无法跳转css文件-非相对路径" tabindex="-1">vscode无法跳转css文件（非相对路径） <a class="header-anchor" href="#vscode无法跳转css文件-非相对路径" aria-label="Permalink to &quot;vscode无法跳转css文件（非相对路径）&quot;">​</a></h3><p>相关文章<a href="https://www.jianshu.com/p/641bcac7754b" target="_blank" rel="noreferrer">vscode TypeScript项目快速跳转到css文件</a></p><ul><li><code>pnpm i typescript-plugin-css-modules -D</code> @5.1.0</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;plugins&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;typescript-plugin-css-modules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;options&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              &quot;customMatcher&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.(styl|css|scss|less|sass)$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><ul><li>vscode编辑器-设置-搜索【<code>typescript.tsserver.pluginPath】- 添加\`\`typescript-plugin-css-modules</code></li></ul><h3 id="关闭vscode烦人的提示音" tabindex="-1">关闭vscode烦人的提示音 <a class="header-anchor" href="#关闭vscode烦人的提示音" aria-label="Permalink to &quot;关闭vscode烦人的提示音&quot;">​</a></h3><ul><li><code>&quot;editor.accessibilitySupport&quot;: &quot;off&quot;,</code> // 此设置可以关闭vscode烦人的提示音 <ul><li><a href="https://blog.csdn.net/qq_34330989/article/details/136562750?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-136562750-blog-134867780.235%5Ev43%5Epc_blog_bottom_relevance_base7&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3" target="_blank" rel="noreferrer">关闭vs code烦人的打字声</a></li></ul></li></ul><h3 id="vue3组件局部导入没有类型提示" tabindex="-1">vue3组件局部导入没有类型提示 <a class="header-anchor" href="#vue3组件局部导入没有类型提示" aria-label="Permalink to &quot;vue3组件局部导入没有类型提示&quot;">​</a></h3><p>这里有个重点就是 局部导入组件正常应该是有类型提示的，但是模板标签里一直无法正常类型提示，</p><p>原因是因为 tsconfig.json文件有问题，</p>`,27),c=s("ol",null,[s("li",null,[s("b",{"text-red-5":""},[i(" 如果导入的组件是 "),s("code",null,".vue"),i("的 那需要 在 "),s("code",null,"tsconfig.json.include"),i("加上 "),s("code",null,"**/*.vue"),i(",因为ts默认只编译"),s("code",null,".ts、.tsx 和 .d.ts"),i(" 文件。")])]),s("li",null,[i("某些文件路径有问题，像"),s("code",null,"references"),i("指向的文件，当前项目并没有导致"),s("code",null,"tsconfig.json"),i("文件报错，导致类型提示不成功 或者尝试 "),s("code",null,"setting.json"),i("里 注释/打开 "),s("code",null,'"typescript.tsserver.pluginPaths": [ "typescript-plugin-css-modules" ],'),s("img",{src:l,alt:"alt text"})])],-1),r=s("p",null,[s("b",{"text-red-5":"","font-bold":""},"修改好，恢复！（如果在注释这些有问题的代码尝试修复时，还是不提示，可看一下【控制台-问题】tsconfig.json文件的报错提示有没有消失，或者可多次尝试重启编辑器，甚至是电脑）")],-1),d=a('<p><img src="'+o+'" alt="alt text"></p><h3 id="vscode的ts服务报tsserver-exited-code-null-signal-sigterm" tabindex="-1">vscode的ts服务报<code>TSServer exited. Code: null. Signal: SIGTERM</code> <a class="header-anchor" href="#vscode的ts服务报tsserver-exited-code-null-signal-sigterm" aria-label="Permalink to &quot;vscode的ts服务报`TSServer exited. Code: null. Signal: SIGTERM`&quot;">​</a></h3><p><a href="https://github.com/microsoft/vscode/issues/191441" target="_blank" rel="noreferrer">TSServer exited #191441</a></p><h3 id="在vue3-ts项目中使用-pnpm-exec-tsc-p-tsconfig-json-报错的地方跟vscode内置ts编译器的智能提示报错的不一致" tabindex="-1">在<code>vue3+ts</code>项目中使用 <code>pnpm exec tsc -p tsconfig.json</code> 报错的地方跟vscode内置ts编译器的智能提示报错的不一致 <a class="header-anchor" href="#在vue3-ts项目中使用-pnpm-exec-tsc-p-tsconfig-json-报错的地方跟vscode内置ts编译器的智能提示报错的不一致" aria-label="Permalink to &quot;在`vue3+ts`项目中使用 `pnpm exec tsc -p tsconfig.json` 报错的地方跟vscode内置ts编译器的智能提示报错的不一致&quot;">​</a></h3><p><code>typescript</code>==<code>tsc</code> | <code>vue-tsc</code>==<code>vue-tsc</code></p><ol><li>因为<code>vue-official</code>插件 的问题，智能提示走的是<code>vue-official</code>插件提供的智能提示，如果禁用这个<code>vue-official</code>那报错信息就跟<code>tsc</code>命令一致</li><li><code>vue3+ts</code>应配合的是<code>vue-tsc</code>命令 <code>pnpm exec vue-tsc -p tsconfig.json</code></li></ol><h2 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-label="Permalink to &quot;插件&quot;">​</a></h2><ul><li><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/markdown-basics?id=%e8%a1%8c%e5%86%85%e4%bb%a3%e7%a0%81" target="_blank" rel="noreferrer">markdown Preview预览插件</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/wNA2NmpfVmVCqYB4Mdo0Tw" target="_blank" rel="noreferrer">流程图插件</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/vpsBGC2eLpKemyTtKuf6pw" target="_blank" rel="noreferrer">插件</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/5L7j2Bj9CMmmtCrHQm0kNA" target="_blank" rel="noreferrer">插件</a></p></li></ul><h2 id="快捷键" tabindex="-1">快捷键 <a class="header-anchor" href="#快捷键" aria-label="Permalink to &quot;快捷键&quot;">​</a></h2><ul><li><code>cmd+shift+P</code><ul><li><code>Developer:Reload with Extensions Disabled</code> 禁用所有插件</li><li><code>TypeScript: Restart TS Server</code> 重启ts语言服务</li></ul></li><li><code>cmd+r</code> 终端运行最新使用的命令</li><li>折叠一级 <code>ctrl + K + 0</code> <code>ctrl + K + L</code></li><li>折叠二级 <code>ctrl + K + 2</code></li><li>展开所有 <code>ctrl + K + J</code></li><li>打开集成终端 <code>ctrl + j</code></li><li><code>option+Escape</code> 智能提示 <ul><li>ts <code>&#39;</code></li></ul></li></ul>',10),k=[h,c,r,d];function u(g,E,v,m,y,f){return n(),t("div",null,k)}const _=e(p,[["render",u]]);export{q as __pageData,_ as default};
